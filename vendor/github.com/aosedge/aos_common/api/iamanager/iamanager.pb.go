// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: iamanager/v5/iamanager.proto

package iamanager

import (
	common "github.com/aosedge/aos_common/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Types     []string `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	TotalSize uint64   `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	Path      string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *PartitionInfo) Reset() {
	*x = PartitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionInfo) ProtoMessage() {}

func (x *PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionInfo.ProtoReflect.Descriptor instead.
func (*PartitionInfo) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{0}
}

func (x *PartitionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionInfo) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *PartitionInfo) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *PartitionInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CPUInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName  string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	NumCores   uint64 `protobuf:"varint,2,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`
	NumThreads uint64 `protobuf:"varint,3,opt,name=num_threads,json=numThreads,proto3" json:"num_threads,omitempty"`
	Arch       string `protobuf:"bytes,4,opt,name=arch,proto3" json:"arch,omitempty"`
	ArchFamily string `protobuf:"bytes,5,opt,name=arch_family,json=archFamily,proto3" json:"arch_family,omitempty"`
	MaxDmips   uint64 `protobuf:"varint,6,opt,name=max_dmips,json=maxDmips,proto3" json:"max_dmips,omitempty"`
}

func (x *CPUInfo) Reset() {
	*x = CPUInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUInfo) ProtoMessage() {}

func (x *CPUInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUInfo.ProtoReflect.Descriptor instead.
func (*CPUInfo) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{1}
}

func (x *CPUInfo) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CPUInfo) GetNumCores() uint64 {
	if x != nil {
		return x.NumCores
	}
	return 0
}

func (x *CPUInfo) GetNumThreads() uint64 {
	if x != nil {
		return x.NumThreads
	}
	return 0
}

func (x *CPUInfo) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *CPUInfo) GetArchFamily() string {
	if x != nil {
		return x.ArchFamily
	}
	return ""
}

func (x *CPUInfo) GetMaxDmips() uint64 {
	if x != nil {
		return x.MaxDmips
	}
	return 0
}

type NodeAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NodeAttribute) Reset() {
	*x = NodeAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAttribute) ProtoMessage() {}

func (x *NodeAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAttribute.ProtoReflect.Descriptor instead.
func (*NodeAttribute) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{2}
}

func (x *NodeAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeAttribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     string            `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeType   string            `protobuf:"bytes,2,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	Name       string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status     string            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	OsType     string            `protobuf:"bytes,5,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	Cpus       []*CPUInfo        `protobuf:"bytes,6,rep,name=cpus,proto3" json:"cpus,omitempty"`
	MaxDmips   uint64            `protobuf:"varint,7,opt,name=max_dmips,json=maxDmips,proto3" json:"max_dmips,omitempty"`
	TotalRam   uint64            `protobuf:"varint,8,opt,name=total_ram,json=totalRam,proto3" json:"total_ram,omitempty"`
	Partitions []*PartitionInfo  `protobuf:"bytes,9,rep,name=partitions,proto3" json:"partitions,omitempty"`
	Attrs      []*NodeAttribute  `protobuf:"bytes,10,rep,name=attrs,proto3" json:"attrs,omitempty"`
	Error      *common.ErrorInfo `protobuf:"bytes,11,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{3}
}

func (x *NodeInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeInfo) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *NodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeInfo) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *NodeInfo) GetCpus() []*CPUInfo {
	if x != nil {
		return x.Cpus
	}
	return nil
}

func (x *NodeInfo) GetMaxDmips() uint64 {
	if x != nil {
		return x.MaxDmips
	}
	return 0
}

func (x *NodeInfo) GetTotalRam() uint64 {
	if x != nil {
		return x.TotalRam
	}
	return 0
}

func (x *NodeInfo) GetPartitions() []*PartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *NodeInfo) GetAttrs() []*NodeAttribute {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *NodeInfo) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Issuer []byte `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Serial string `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
}

func (x *GetCertRequest) Reset() {
	*x = GetCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertRequest) ProtoMessage() {}

func (x *GetCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertRequest.ProtoReflect.Descriptor instead.
func (*GetCertRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{4}
}

func (x *GetCertRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetCertRequest) GetIssuer() []byte {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *GetCertRequest) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

type GetCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CertUrl string `protobuf:"bytes,2,opt,name=cert_url,json=certUrl,proto3" json:"cert_url,omitempty"`
	KeyUrl  string `protobuf:"bytes,3,opt,name=key_url,json=keyUrl,proto3" json:"key_url,omitempty"`
}

func (x *GetCertResponse) Reset() {
	*x = GetCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertResponse) ProtoMessage() {}

func (x *GetCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertResponse.ProtoReflect.Descriptor instead.
func (*GetCertResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{5}
}

func (x *GetCertResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetCertResponse) GetCertUrl() string {
	if x != nil {
		return x.CertUrl
	}
	return ""
}

func (x *GetCertResponse) GetKeyUrl() string {
	if x != nil {
		return x.KeyUrl
	}
	return ""
}

type SystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId  string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	UnitModel string `protobuf:"bytes,2,opt,name=unit_model,json=unitModel,proto3" json:"unit_model,omitempty"`
}

func (x *SystemInfo) Reset() {
	*x = SystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfo) ProtoMessage() {}

func (x *SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfo.ProtoReflect.Descriptor instead.
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{6}
}

func (x *SystemInfo) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *SystemInfo) GetUnitModel() string {
	if x != nil {
		return x.UnitModel
	}
	return ""
}

type Subjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *Subjects) Reset() {
	*x = Subjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subjects) ProtoMessage() {}

func (x *Subjects) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subjects.ProtoReflect.Descriptor instead.
func (*Subjects) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{7}
}

func (x *Subjects) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type PermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret             string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	FunctionalServerId string `protobuf:"bytes,2,opt,name=functional_server_id,json=functionalServerId,proto3" json:"functional_server_id,omitempty"`
}

func (x *PermissionsRequest) Reset() {
	*x = PermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsRequest) ProtoMessage() {}

func (x *PermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsRequest.ProtoReflect.Descriptor instead.
func (*PermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{8}
}

func (x *PermissionsRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *PermissionsRequest) GetFunctionalServerId() string {
	if x != nil {
		return x.FunctionalServerId
	}
	return ""
}

type PermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance    *common.InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Permissions *Permissions          `protobuf:"bytes,2,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *PermissionsResponse) Reset() {
	*x = PermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsResponse) ProtoMessage() {}

func (x *PermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsResponse.ProtoReflect.Descriptor instead.
func (*PermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{9}
}

func (x *PermissionsResponse) GetInstance() *common.InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *PermissionsResponse) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type NodesID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *NodesID) Reset() {
	*x = NodesID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodesID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesID) ProtoMessage() {}

func (x *NodesID) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesID.ProtoReflect.Descriptor instead.
func (*NodesID) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{10}
}

func (x *NodesID) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetCertTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *GetCertTypesRequest) Reset() {
	*x = GetCertTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertTypesRequest) ProtoMessage() {}

func (x *GetCertTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertTypesRequest.ProtoReflect.Descriptor instead.
func (*GetCertTypesRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{11}
}

func (x *GetCertTypesRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type CertTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *CertTypes) Reset() {
	*x = CertTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertTypes) ProtoMessage() {}

func (x *CertTypes) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertTypes.ProtoReflect.Descriptor instead.
func (*CertTypes) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{12}
}

func (x *CertTypes) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

type CreateKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Subject  string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CreateKeyRequest) Reset() {
	*x = CreateKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyRequest) ProtoMessage() {}

func (x *CreateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateKeyRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{13}
}

func (x *CreateKeyRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *CreateKeyRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateKeyRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateKeyRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CreateKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string            `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Type   string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Csr    string            `protobuf:"bytes,3,opt,name=csr,proto3" json:"csr,omitempty"`
	Error  *common.ErrorInfo `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateKeyResponse) Reset() {
	*x = CreateKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyResponse) ProtoMessage() {}

func (x *CreateKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateKeyResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{14}
}

func (x *CreateKeyResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *CreateKeyResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateKeyResponse) GetCsr() string {
	if x != nil {
		return x.Csr
	}
	return ""
}

func (x *CreateKeyResponse) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type ApplyCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Cert   string `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (x *ApplyCertRequest) Reset() {
	*x = ApplyCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCertRequest) ProtoMessage() {}

func (x *ApplyCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCertRequest.ProtoReflect.Descriptor instead.
func (*ApplyCertRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{15}
}

func (x *ApplyCertRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ApplyCertRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApplyCertRequest) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

type ApplyCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  string            `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Type    string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CertUrl string            `protobuf:"bytes,3,opt,name=cert_url,json=certUrl,proto3" json:"cert_url,omitempty"`
	Serial  string            `protobuf:"bytes,4,opt,name=serial,proto3" json:"serial,omitempty"`
	Error   *common.ErrorInfo `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ApplyCertResponse) Reset() {
	*x = ApplyCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCertResponse) ProtoMessage() {}

func (x *ApplyCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCertResponse.ProtoReflect.Descriptor instead.
func (*ApplyCertResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{16}
}

func (x *ApplyCertResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ApplyCertResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApplyCertResponse) GetCertUrl() string {
	if x != nil {
		return x.CertUrl
	}
	return ""
}

func (x *ApplyCertResponse) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *ApplyCertResponse) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type Permissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions map[string]string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{17}
}

func (x *Permissions) GetPermissions() map[string]string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type RegisterInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance    *common.InstanceIdent   `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Permissions map[string]*Permissions `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RegisterInstanceRequest) Reset() {
	*x = RegisterInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstanceRequest) ProtoMessage() {}

func (x *RegisterInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstanceRequest.ProtoReflect.Descriptor instead.
func (*RegisterInstanceRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterInstanceRequest) GetInstance() *common.InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *RegisterInstanceRequest) GetPermissions() map[string]*Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type RegisterInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *RegisterInstanceResponse) Reset() {
	*x = RegisterInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstanceResponse) ProtoMessage() {}

func (x *RegisterInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstanceResponse.ProtoReflect.Descriptor instead.
func (*RegisterInstanceResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterInstanceResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type UnregisterInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *common.InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *UnregisterInstanceRequest) Reset() {
	*x = UnregisterInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterInstanceRequest) ProtoMessage() {}

func (x *UnregisterInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterInstanceRequest.ProtoReflect.Descriptor instead.
func (*UnregisterInstanceRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{20}
}

func (x *UnregisterInstanceRequest) GetInstance() *common.InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

type GetNodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *GetNodeInfoRequest) Reset() {
	*x = GetNodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInfoRequest) ProtoMessage() {}

func (x *GetNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{21}
}

func (x *GetNodeInfoRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type PauseNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *PauseNodeRequest) Reset() {
	*x = PauseNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseNodeRequest) ProtoMessage() {}

func (x *PauseNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseNodeRequest.ProtoReflect.Descriptor instead.
func (*PauseNodeRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{22}
}

func (x *PauseNodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type PauseNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *common.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PauseNodeResponse) Reset() {
	*x = PauseNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseNodeResponse) ProtoMessage() {}

func (x *PauseNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseNodeResponse.ProtoReflect.Descriptor instead.
func (*PauseNodeResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{23}
}

func (x *PauseNodeResponse) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type ResumeNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *ResumeNodeRequest) Reset() {
	*x = ResumeNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeNodeRequest) ProtoMessage() {}

func (x *ResumeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeNodeRequest.ProtoReflect.Descriptor instead.
func (*ResumeNodeRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{24}
}

func (x *ResumeNodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type ResumeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *common.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResumeNodeResponse) Reset() {
	*x = ResumeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeNodeResponse) ProtoMessage() {}

func (x *ResumeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeNodeResponse.ProtoReflect.Descriptor instead.
func (*ResumeNodeResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{25}
}

func (x *ResumeNodeResponse) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type StartProvisioningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *StartProvisioningRequest) Reset() {
	*x = StartProvisioningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProvisioningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProvisioningRequest) ProtoMessage() {}

func (x *StartProvisioningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProvisioningRequest.ProtoReflect.Descriptor instead.
func (*StartProvisioningRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{26}
}

func (x *StartProvisioningRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *StartProvisioningRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type StartProvisioningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *common.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StartProvisioningResponse) Reset() {
	*x = StartProvisioningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProvisioningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProvisioningResponse) ProtoMessage() {}

func (x *StartProvisioningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProvisioningResponse.ProtoReflect.Descriptor instead.
func (*StartProvisioningResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{27}
}

func (x *StartProvisioningResponse) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type FinishProvisioningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *FinishProvisioningRequest) Reset() {
	*x = FinishProvisioningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishProvisioningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishProvisioningRequest) ProtoMessage() {}

func (x *FinishProvisioningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishProvisioningRequest.ProtoReflect.Descriptor instead.
func (*FinishProvisioningRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{28}
}

func (x *FinishProvisioningRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *FinishProvisioningRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type FinishProvisioningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *common.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FinishProvisioningResponse) Reset() {
	*x = FinishProvisioningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishProvisioningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishProvisioningResponse) ProtoMessage() {}

func (x *FinishProvisioningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishProvisioningResponse.ProtoReflect.Descriptor instead.
func (*FinishProvisioningResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{29}
}

func (x *FinishProvisioningResponse) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeprovisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *DeprovisionRequest) Reset() {
	*x = DeprovisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprovisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprovisionRequest) ProtoMessage() {}

func (x *DeprovisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprovisionRequest.ProtoReflect.Descriptor instead.
func (*DeprovisionRequest) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{30}
}

func (x *DeprovisionRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *DeprovisionRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type DeprovisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *common.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeprovisionResponse) Reset() {
	*x = DeprovisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprovisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprovisionResponse) ProtoMessage() {}

func (x *DeprovisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprovisionResponse.ProtoReflect.Descriptor instead.
func (*DeprovisionResponse) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{31}
}

func (x *DeprovisionResponse) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type IAMIncomingMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IAMIncomingMessage:
	//
	//	*IAMIncomingMessages_StartProvisioningRequest
	//	*IAMIncomingMessages_GetCertTypesRequest
	//	*IAMIncomingMessages_FinishProvisioningRequest
	//	*IAMIncomingMessages_DeprovisionRequest
	//	*IAMIncomingMessages_PauseNodeRequest
	//	*IAMIncomingMessages_ResumeNodeRequest
	//	*IAMIncomingMessages_CreateKeyRequest
	//	*IAMIncomingMessages_ApplyCertRequest
	IAMIncomingMessage isIAMIncomingMessages_IAMIncomingMessage `protobuf_oneof:"IAMIncomingMessage"`
}

func (x *IAMIncomingMessages) Reset() {
	*x = IAMIncomingMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAMIncomingMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAMIncomingMessages) ProtoMessage() {}

func (x *IAMIncomingMessages) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAMIncomingMessages.ProtoReflect.Descriptor instead.
func (*IAMIncomingMessages) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{32}
}

func (m *IAMIncomingMessages) GetIAMIncomingMessage() isIAMIncomingMessages_IAMIncomingMessage {
	if m != nil {
		return m.IAMIncomingMessage
	}
	return nil
}

func (x *IAMIncomingMessages) GetStartProvisioningRequest() *StartProvisioningRequest {
	if x, ok := x.GetIAMIncomingMessage().(*IAMIncomingMessages_StartProvisioningRequest); ok {
		return x.StartProvisioningRequest
	}
	return nil
}

func (x *IAMIncomingMessages) GetGetCertTypesRequest() *GetCertTypesRequest {
	if x, ok := x.GetIAMIncomingMessage().(*IAMIncomingMessages_GetCertTypesRequest); ok {
		return x.GetCertTypesRequest
	}
	return nil
}

func (x *IAMIncomingMessages) GetFinishProvisioningRequest() *FinishProvisioningRequest {
	if x, ok := x.GetIAMIncomingMessage().(*IAMIncomingMessages_FinishProvisioningRequest); ok {
		return x.FinishProvisioningRequest
	}
	return nil
}

func (x *IAMIncomingMessages) GetDeprovisionRequest() *DeprovisionRequest {
	if x, ok := x.GetIAMIncomingMessage().(*IAMIncomingMessages_DeprovisionRequest); ok {
		return x.DeprovisionRequest
	}
	return nil
}

func (x *IAMIncomingMessages) GetPauseNodeRequest() *PauseNodeRequest {
	if x, ok := x.GetIAMIncomingMessage().(*IAMIncomingMessages_PauseNodeRequest); ok {
		return x.PauseNodeRequest
	}
	return nil
}

func (x *IAMIncomingMessages) GetResumeNodeRequest() *ResumeNodeRequest {
	if x, ok := x.GetIAMIncomingMessage().(*IAMIncomingMessages_ResumeNodeRequest); ok {
		return x.ResumeNodeRequest
	}
	return nil
}

func (x *IAMIncomingMessages) GetCreateKeyRequest() *CreateKeyRequest {
	if x, ok := x.GetIAMIncomingMessage().(*IAMIncomingMessages_CreateKeyRequest); ok {
		return x.CreateKeyRequest
	}
	return nil
}

func (x *IAMIncomingMessages) GetApplyCertRequest() *ApplyCertRequest {
	if x, ok := x.GetIAMIncomingMessage().(*IAMIncomingMessages_ApplyCertRequest); ok {
		return x.ApplyCertRequest
	}
	return nil
}

type isIAMIncomingMessages_IAMIncomingMessage interface {
	isIAMIncomingMessages_IAMIncomingMessage()
}

type IAMIncomingMessages_StartProvisioningRequest struct {
	StartProvisioningRequest *StartProvisioningRequest `protobuf:"bytes,1,opt,name=start_provisioning_request,json=startProvisioningRequest,proto3,oneof"`
}

type IAMIncomingMessages_GetCertTypesRequest struct {
	GetCertTypesRequest *GetCertTypesRequest `protobuf:"bytes,2,opt,name=get_cert_types_request,json=getCertTypesRequest,proto3,oneof"`
}

type IAMIncomingMessages_FinishProvisioningRequest struct {
	FinishProvisioningRequest *FinishProvisioningRequest `protobuf:"bytes,3,opt,name=finish_provisioning_request,json=finishProvisioningRequest,proto3,oneof"`
}

type IAMIncomingMessages_DeprovisionRequest struct {
	DeprovisionRequest *DeprovisionRequest `protobuf:"bytes,4,opt,name=deprovision_request,json=deprovisionRequest,proto3,oneof"`
}

type IAMIncomingMessages_PauseNodeRequest struct {
	PauseNodeRequest *PauseNodeRequest `protobuf:"bytes,5,opt,name=pause_node_request,json=pauseNodeRequest,proto3,oneof"`
}

type IAMIncomingMessages_ResumeNodeRequest struct {
	ResumeNodeRequest *ResumeNodeRequest `protobuf:"bytes,6,opt,name=resume_node_request,json=resumeNodeRequest,proto3,oneof"`
}

type IAMIncomingMessages_CreateKeyRequest struct {
	CreateKeyRequest *CreateKeyRequest `protobuf:"bytes,7,opt,name=create_key_request,json=createKeyRequest,proto3,oneof"`
}

type IAMIncomingMessages_ApplyCertRequest struct {
	ApplyCertRequest *ApplyCertRequest `protobuf:"bytes,8,opt,name=apply_cert_request,json=applyCertRequest,proto3,oneof"`
}

func (*IAMIncomingMessages_StartProvisioningRequest) isIAMIncomingMessages_IAMIncomingMessage() {}

func (*IAMIncomingMessages_GetCertTypesRequest) isIAMIncomingMessages_IAMIncomingMessage() {}

func (*IAMIncomingMessages_FinishProvisioningRequest) isIAMIncomingMessages_IAMIncomingMessage() {}

func (*IAMIncomingMessages_DeprovisionRequest) isIAMIncomingMessages_IAMIncomingMessage() {}

func (*IAMIncomingMessages_PauseNodeRequest) isIAMIncomingMessages_IAMIncomingMessage() {}

func (*IAMIncomingMessages_ResumeNodeRequest) isIAMIncomingMessages_IAMIncomingMessage() {}

func (*IAMIncomingMessages_CreateKeyRequest) isIAMIncomingMessages_IAMIncomingMessage() {}

func (*IAMIncomingMessages_ApplyCertRequest) isIAMIncomingMessages_IAMIncomingMessage() {}

type IAMOutgoingMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IAMOutgoingMessage:
	//
	//	*IAMOutgoingMessages_NodeInfo
	//	*IAMOutgoingMessages_StartProvisioningResponse
	//	*IAMOutgoingMessages_CertTypesResponse
	//	*IAMOutgoingMessages_FinishProvisioningResponse
	//	*IAMOutgoingMessages_DeprovisionResponse
	//	*IAMOutgoingMessages_PauseNodeResponse
	//	*IAMOutgoingMessages_ResumeNodeResponse
	//	*IAMOutgoingMessages_CreateKeyResponse
	//	*IAMOutgoingMessages_ApplyCertResponse
	IAMOutgoingMessage isIAMOutgoingMessages_IAMOutgoingMessage `protobuf_oneof:"IAMOutgoingMessage"`
}

func (x *IAMOutgoingMessages) Reset() {
	*x = IAMOutgoingMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iamanager_v5_iamanager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAMOutgoingMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAMOutgoingMessages) ProtoMessage() {}

func (x *IAMOutgoingMessages) ProtoReflect() protoreflect.Message {
	mi := &file_iamanager_v5_iamanager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAMOutgoingMessages.ProtoReflect.Descriptor instead.
func (*IAMOutgoingMessages) Descriptor() ([]byte, []int) {
	return file_iamanager_v5_iamanager_proto_rawDescGZIP(), []int{33}
}

func (m *IAMOutgoingMessages) GetIAMOutgoingMessage() isIAMOutgoingMessages_IAMOutgoingMessage {
	if m != nil {
		return m.IAMOutgoingMessage
	}
	return nil
}

func (x *IAMOutgoingMessages) GetNodeInfo() *NodeInfo {
	if x, ok := x.GetIAMOutgoingMessage().(*IAMOutgoingMessages_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (x *IAMOutgoingMessages) GetStartProvisioningResponse() *StartProvisioningResponse {
	if x, ok := x.GetIAMOutgoingMessage().(*IAMOutgoingMessages_StartProvisioningResponse); ok {
		return x.StartProvisioningResponse
	}
	return nil
}

func (x *IAMOutgoingMessages) GetCertTypesResponse() *CertTypes {
	if x, ok := x.GetIAMOutgoingMessage().(*IAMOutgoingMessages_CertTypesResponse); ok {
		return x.CertTypesResponse
	}
	return nil
}

func (x *IAMOutgoingMessages) GetFinishProvisioningResponse() *FinishProvisioningResponse {
	if x, ok := x.GetIAMOutgoingMessage().(*IAMOutgoingMessages_FinishProvisioningResponse); ok {
		return x.FinishProvisioningResponse
	}
	return nil
}

func (x *IAMOutgoingMessages) GetDeprovisionResponse() *DeprovisionResponse {
	if x, ok := x.GetIAMOutgoingMessage().(*IAMOutgoingMessages_DeprovisionResponse); ok {
		return x.DeprovisionResponse
	}
	return nil
}

func (x *IAMOutgoingMessages) GetPauseNodeResponse() *PauseNodeResponse {
	if x, ok := x.GetIAMOutgoingMessage().(*IAMOutgoingMessages_PauseNodeResponse); ok {
		return x.PauseNodeResponse
	}
	return nil
}

func (x *IAMOutgoingMessages) GetResumeNodeResponse() *ResumeNodeResponse {
	if x, ok := x.GetIAMOutgoingMessage().(*IAMOutgoingMessages_ResumeNodeResponse); ok {
		return x.ResumeNodeResponse
	}
	return nil
}

func (x *IAMOutgoingMessages) GetCreateKeyResponse() *CreateKeyResponse {
	if x, ok := x.GetIAMOutgoingMessage().(*IAMOutgoingMessages_CreateKeyResponse); ok {
		return x.CreateKeyResponse
	}
	return nil
}

func (x *IAMOutgoingMessages) GetApplyCertResponse() *ApplyCertResponse {
	if x, ok := x.GetIAMOutgoingMessage().(*IAMOutgoingMessages_ApplyCertResponse); ok {
		return x.ApplyCertResponse
	}
	return nil
}

type isIAMOutgoingMessages_IAMOutgoingMessage interface {
	isIAMOutgoingMessages_IAMOutgoingMessage()
}

type IAMOutgoingMessages_NodeInfo struct {
	NodeInfo *NodeInfo `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3,oneof"`
}

type IAMOutgoingMessages_StartProvisioningResponse struct {
	StartProvisioningResponse *StartProvisioningResponse `protobuf:"bytes,2,opt,name=start_provisioning_response,json=startProvisioningResponse,proto3,oneof"`
}

type IAMOutgoingMessages_CertTypesResponse struct {
	CertTypesResponse *CertTypes `protobuf:"bytes,3,opt,name=cert_types_response,json=certTypesResponse,proto3,oneof"`
}

type IAMOutgoingMessages_FinishProvisioningResponse struct {
	FinishProvisioningResponse *FinishProvisioningResponse `protobuf:"bytes,4,opt,name=finish_provisioning_response,json=finishProvisioningResponse,proto3,oneof"`
}

type IAMOutgoingMessages_DeprovisionResponse struct {
	DeprovisionResponse *DeprovisionResponse `protobuf:"bytes,5,opt,name=deprovision_response,json=deprovisionResponse,proto3,oneof"`
}

type IAMOutgoingMessages_PauseNodeResponse struct {
	PauseNodeResponse *PauseNodeResponse `protobuf:"bytes,6,opt,name=pause_node_response,json=pauseNodeResponse,proto3,oneof"`
}

type IAMOutgoingMessages_ResumeNodeResponse struct {
	ResumeNodeResponse *ResumeNodeResponse `protobuf:"bytes,7,opt,name=resume_node_response,json=resumeNodeResponse,proto3,oneof"`
}

type IAMOutgoingMessages_CreateKeyResponse struct {
	CreateKeyResponse *CreateKeyResponse `protobuf:"bytes,8,opt,name=create_key_response,json=createKeyResponse,proto3,oneof"`
}

type IAMOutgoingMessages_ApplyCertResponse struct {
	ApplyCertResponse *ApplyCertResponse `protobuf:"bytes,9,opt,name=apply_cert_response,json=applyCertResponse,proto3,oneof"`
}

func (*IAMOutgoingMessages_NodeInfo) isIAMOutgoingMessages_IAMOutgoingMessage() {}

func (*IAMOutgoingMessages_StartProvisioningResponse) isIAMOutgoingMessages_IAMOutgoingMessage() {}

func (*IAMOutgoingMessages_CertTypesResponse) isIAMOutgoingMessages_IAMOutgoingMessage() {}

func (*IAMOutgoingMessages_FinishProvisioningResponse) isIAMOutgoingMessages_IAMOutgoingMessage() {}

func (*IAMOutgoingMessages_DeprovisionResponse) isIAMOutgoingMessages_IAMOutgoingMessage() {}

func (*IAMOutgoingMessages_PauseNodeResponse) isIAMOutgoingMessages_IAMOutgoingMessage() {}

func (*IAMOutgoingMessages_ResumeNodeResponse) isIAMOutgoingMessages_IAMOutgoingMessage() {}

func (*IAMOutgoingMessages_CreateKeyResponse) isIAMOutgoingMessages_IAMOutgoingMessage() {}

func (*IAMOutgoingMessages_ApplyCertResponse) isIAMOutgoingMessages_IAMOutgoingMessage() {}

var File_iamanager_v5_iamanager_proto protoreflect.FileDescriptor

var file_iamanager_v5_iamanager_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x35, 0x2f, 0x69,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x6c, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0xb8, 0x01, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e,
	0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6d, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x6d, 0x69, 0x70, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x63, 0x70, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x43, 0x50, 0x55, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x6d, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x44, 0x6d, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x54,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x22, 0x59, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x65, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x55, 0x72, 0x6c, 0x22,
	0x48, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x26, 0x0a, 0x08, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x22, 0x5e, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x35, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1b, 0x0a, 0x07,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x09, 0x43, 0x65, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x7e, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x73, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x53, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x65, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x59, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x32, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x22, 0x51, 0x0a, 0x19, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x10, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x3f, 0x0a, 0x11, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x22, 0x40, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x47, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a,
	0x19, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x48, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x49, 0x0a, 0x12, 0x44, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x41, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf0, 0x05, 0x0a, 0x13, 0x49, 0x41, 0x4d, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x66, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x35, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x69, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x19, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x13,
	0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4e, 0x0a, 0x12, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x70, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x49, 0x41, 0x4d, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xad, 0x06, 0x0a, 0x13, 0x49,
	0x41, 0x4d, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x35, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a, 0x1b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x63, 0x65,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6c, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x35, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x1a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x14, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x35, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x70, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x49, 0x41, 0x4d, 0x4f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x9d, 0x01, 0x0a, 0x10, 0x49,
	0x41, 0x4d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x2e, 0x69, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf0, 0x01, 0x0a, 0x18, 0x49,
	0x41, 0x4d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x18, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x35, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x00, 0x30, 0x01, 0x32, 0x76, 0x0a,
	0x1b, 0x49, 0x41, 0x4d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20,
	0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xcc, 0x02, 0x0a, 0x15, 0x49, 0x41, 0x4d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x44, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x35, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x14,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x69,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x49, 0x41, 0x4d, 0x4f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x21, 0x2e, 0x69, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x49, 0x41, 0x4d, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x32, 0xb4, 0x01, 0x0a, 0x0f, 0x49, 0x41, 0x4d, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x35, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x35, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x8f, 0x03, 0x0a, 0x16,
	0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x69, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x35, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb7, 0x01,
	0x0a, 0x15, 0x49, 0x41, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x35, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x35, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x1e, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x35, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x35, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd5, 0x01, 0x0a, 0x15, 0x49, 0x41, 0x4d, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x63, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x69, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x35, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x69,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x35, 0x2e, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iamanager_v5_iamanager_proto_rawDescOnce sync.Once
	file_iamanager_v5_iamanager_proto_rawDescData = file_iamanager_v5_iamanager_proto_rawDesc
)

func file_iamanager_v5_iamanager_proto_rawDescGZIP() []byte {
	file_iamanager_v5_iamanager_proto_rawDescOnce.Do(func() {
		file_iamanager_v5_iamanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_iamanager_v5_iamanager_proto_rawDescData)
	})
	return file_iamanager_v5_iamanager_proto_rawDescData
}

var file_iamanager_v5_iamanager_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_iamanager_v5_iamanager_proto_goTypes = []interface{}{
	(*PartitionInfo)(nil),              // 0: iamanager.v5.PartitionInfo
	(*CPUInfo)(nil),                    // 1: iamanager.v5.CPUInfo
	(*NodeAttribute)(nil),              // 2: iamanager.v5.NodeAttribute
	(*NodeInfo)(nil),                   // 3: iamanager.v5.NodeInfo
	(*GetCertRequest)(nil),             // 4: iamanager.v5.GetCertRequest
	(*GetCertResponse)(nil),            // 5: iamanager.v5.GetCertResponse
	(*SystemInfo)(nil),                 // 6: iamanager.v5.SystemInfo
	(*Subjects)(nil),                   // 7: iamanager.v5.Subjects
	(*PermissionsRequest)(nil),         // 8: iamanager.v5.PermissionsRequest
	(*PermissionsResponse)(nil),        // 9: iamanager.v5.PermissionsResponse
	(*NodesID)(nil),                    // 10: iamanager.v5.NodesID
	(*GetCertTypesRequest)(nil),        // 11: iamanager.v5.GetCertTypesRequest
	(*CertTypes)(nil),                  // 12: iamanager.v5.CertTypes
	(*CreateKeyRequest)(nil),           // 13: iamanager.v5.CreateKeyRequest
	(*CreateKeyResponse)(nil),          // 14: iamanager.v5.CreateKeyResponse
	(*ApplyCertRequest)(nil),           // 15: iamanager.v5.ApplyCertRequest
	(*ApplyCertResponse)(nil),          // 16: iamanager.v5.ApplyCertResponse
	(*Permissions)(nil),                // 17: iamanager.v5.Permissions
	(*RegisterInstanceRequest)(nil),    // 18: iamanager.v5.RegisterInstanceRequest
	(*RegisterInstanceResponse)(nil),   // 19: iamanager.v5.RegisterInstanceResponse
	(*UnregisterInstanceRequest)(nil),  // 20: iamanager.v5.UnregisterInstanceRequest
	(*GetNodeInfoRequest)(nil),         // 21: iamanager.v5.GetNodeInfoRequest
	(*PauseNodeRequest)(nil),           // 22: iamanager.v5.PauseNodeRequest
	(*PauseNodeResponse)(nil),          // 23: iamanager.v5.PauseNodeResponse
	(*ResumeNodeRequest)(nil),          // 24: iamanager.v5.ResumeNodeRequest
	(*ResumeNodeResponse)(nil),         // 25: iamanager.v5.ResumeNodeResponse
	(*StartProvisioningRequest)(nil),   // 26: iamanager.v5.StartProvisioningRequest
	(*StartProvisioningResponse)(nil),  // 27: iamanager.v5.StartProvisioningResponse
	(*FinishProvisioningRequest)(nil),  // 28: iamanager.v5.FinishProvisioningRequest
	(*FinishProvisioningResponse)(nil), // 29: iamanager.v5.FinishProvisioningResponse
	(*DeprovisionRequest)(nil),         // 30: iamanager.v5.DeprovisionRequest
	(*DeprovisionResponse)(nil),        // 31: iamanager.v5.DeprovisionResponse
	(*IAMIncomingMessages)(nil),        // 32: iamanager.v5.IAMIncomingMessages
	(*IAMOutgoingMessages)(nil),        // 33: iamanager.v5.IAMOutgoingMessages
	nil,                                // 34: iamanager.v5.Permissions.PermissionsEntry
	nil,                                // 35: iamanager.v5.RegisterInstanceRequest.PermissionsEntry
	(*common.ErrorInfo)(nil),           // 36: common.v1.ErrorInfo
	(*common.InstanceIdent)(nil),       // 37: common.v1.InstanceIdent
	(*emptypb.Empty)(nil),              // 38: google.protobuf.Empty
}
var file_iamanager_v5_iamanager_proto_depIdxs = []int32{
	1,  // 0: iamanager.v5.NodeInfo.cpus:type_name -> iamanager.v5.CPUInfo
	0,  // 1: iamanager.v5.NodeInfo.partitions:type_name -> iamanager.v5.PartitionInfo
	2,  // 2: iamanager.v5.NodeInfo.attrs:type_name -> iamanager.v5.NodeAttribute
	36, // 3: iamanager.v5.NodeInfo.error:type_name -> common.v1.ErrorInfo
	37, // 4: iamanager.v5.PermissionsResponse.instance:type_name -> common.v1.InstanceIdent
	17, // 5: iamanager.v5.PermissionsResponse.permissions:type_name -> iamanager.v5.Permissions
	36, // 6: iamanager.v5.CreateKeyResponse.error:type_name -> common.v1.ErrorInfo
	36, // 7: iamanager.v5.ApplyCertResponse.error:type_name -> common.v1.ErrorInfo
	34, // 8: iamanager.v5.Permissions.permissions:type_name -> iamanager.v5.Permissions.PermissionsEntry
	37, // 9: iamanager.v5.RegisterInstanceRequest.instance:type_name -> common.v1.InstanceIdent
	35, // 10: iamanager.v5.RegisterInstanceRequest.permissions:type_name -> iamanager.v5.RegisterInstanceRequest.PermissionsEntry
	37, // 11: iamanager.v5.UnregisterInstanceRequest.instance:type_name -> common.v1.InstanceIdent
	36, // 12: iamanager.v5.PauseNodeResponse.error:type_name -> common.v1.ErrorInfo
	36, // 13: iamanager.v5.ResumeNodeResponse.error:type_name -> common.v1.ErrorInfo
	36, // 14: iamanager.v5.StartProvisioningResponse.error:type_name -> common.v1.ErrorInfo
	36, // 15: iamanager.v5.FinishProvisioningResponse.error:type_name -> common.v1.ErrorInfo
	36, // 16: iamanager.v5.DeprovisionResponse.error:type_name -> common.v1.ErrorInfo
	26, // 17: iamanager.v5.IAMIncomingMessages.start_provisioning_request:type_name -> iamanager.v5.StartProvisioningRequest
	11, // 18: iamanager.v5.IAMIncomingMessages.get_cert_types_request:type_name -> iamanager.v5.GetCertTypesRequest
	28, // 19: iamanager.v5.IAMIncomingMessages.finish_provisioning_request:type_name -> iamanager.v5.FinishProvisioningRequest
	30, // 20: iamanager.v5.IAMIncomingMessages.deprovision_request:type_name -> iamanager.v5.DeprovisionRequest
	22, // 21: iamanager.v5.IAMIncomingMessages.pause_node_request:type_name -> iamanager.v5.PauseNodeRequest
	24, // 22: iamanager.v5.IAMIncomingMessages.resume_node_request:type_name -> iamanager.v5.ResumeNodeRequest
	13, // 23: iamanager.v5.IAMIncomingMessages.create_key_request:type_name -> iamanager.v5.CreateKeyRequest
	15, // 24: iamanager.v5.IAMIncomingMessages.apply_cert_request:type_name -> iamanager.v5.ApplyCertRequest
	3,  // 25: iamanager.v5.IAMOutgoingMessages.node_info:type_name -> iamanager.v5.NodeInfo
	27, // 26: iamanager.v5.IAMOutgoingMessages.start_provisioning_response:type_name -> iamanager.v5.StartProvisioningResponse
	12, // 27: iamanager.v5.IAMOutgoingMessages.cert_types_response:type_name -> iamanager.v5.CertTypes
	29, // 28: iamanager.v5.IAMOutgoingMessages.finish_provisioning_response:type_name -> iamanager.v5.FinishProvisioningResponse
	31, // 29: iamanager.v5.IAMOutgoingMessages.deprovision_response:type_name -> iamanager.v5.DeprovisionResponse
	23, // 30: iamanager.v5.IAMOutgoingMessages.pause_node_response:type_name -> iamanager.v5.PauseNodeResponse
	25, // 31: iamanager.v5.IAMOutgoingMessages.resume_node_response:type_name -> iamanager.v5.ResumeNodeResponse
	14, // 32: iamanager.v5.IAMOutgoingMessages.create_key_response:type_name -> iamanager.v5.CreateKeyResponse
	16, // 33: iamanager.v5.IAMOutgoingMessages.apply_cert_response:type_name -> iamanager.v5.ApplyCertResponse
	17, // 34: iamanager.v5.RegisterInstanceRequest.PermissionsEntry.value:type_name -> iamanager.v5.Permissions
	38, // 35: iamanager.v5.IAMPublicService.GetNodeInfo:input_type -> google.protobuf.Empty
	4,  // 36: iamanager.v5.IAMPublicService.GetCert:input_type -> iamanager.v5.GetCertRequest
	38, // 37: iamanager.v5.IAMPublicIdentityService.GetSystemInfo:input_type -> google.protobuf.Empty
	38, // 38: iamanager.v5.IAMPublicIdentityService.GetSubjects:input_type -> google.protobuf.Empty
	38, // 39: iamanager.v5.IAMPublicIdentityService.SubscribeSubjectsChanged:input_type -> google.protobuf.Empty
	8,  // 40: iamanager.v5.IAMPublicPermissionsService.GetPermissions:input_type -> iamanager.v5.PermissionsRequest
	38, // 41: iamanager.v5.IAMPublicNodesService.GetAllNodeIDs:input_type -> google.protobuf.Empty
	21, // 42: iamanager.v5.IAMPublicNodesService.GetNodeInfo:input_type -> iamanager.v5.GetNodeInfoRequest
	38, // 43: iamanager.v5.IAMPublicNodesService.SubscribeNodeChanged:input_type -> google.protobuf.Empty
	33, // 44: iamanager.v5.IAMPublicNodesService.RegisterNode:input_type -> iamanager.v5.IAMOutgoingMessages
	22, // 45: iamanager.v5.IAMNodesService.PauseNode:input_type -> iamanager.v5.PauseNodeRequest
	24, // 46: iamanager.v5.IAMNodesService.ResumeNode:input_type -> iamanager.v5.ResumeNodeRequest
	11, // 47: iamanager.v5.IAMProvisioningService.GetCertTypes:input_type -> iamanager.v5.GetCertTypesRequest
	26, // 48: iamanager.v5.IAMProvisioningService.StartProvisioning:input_type -> iamanager.v5.StartProvisioningRequest
	28, // 49: iamanager.v5.IAMProvisioningService.FinishProvisioning:input_type -> iamanager.v5.FinishProvisioningRequest
	30, // 50: iamanager.v5.IAMProvisioningService.Deprovision:input_type -> iamanager.v5.DeprovisionRequest
	13, // 51: iamanager.v5.IAMCertificateService.CreateKey:input_type -> iamanager.v5.CreateKeyRequest
	15, // 52: iamanager.v5.IAMCertificateService.ApplyCert:input_type -> iamanager.v5.ApplyCertRequest
	18, // 53: iamanager.v5.IAMPermissionsService.RegisterInstance:input_type -> iamanager.v5.RegisterInstanceRequest
	20, // 54: iamanager.v5.IAMPermissionsService.UnregisterInstance:input_type -> iamanager.v5.UnregisterInstanceRequest
	3,  // 55: iamanager.v5.IAMPublicService.GetNodeInfo:output_type -> iamanager.v5.NodeInfo
	5,  // 56: iamanager.v5.IAMPublicService.GetCert:output_type -> iamanager.v5.GetCertResponse
	6,  // 57: iamanager.v5.IAMPublicIdentityService.GetSystemInfo:output_type -> iamanager.v5.SystemInfo
	7,  // 58: iamanager.v5.IAMPublicIdentityService.GetSubjects:output_type -> iamanager.v5.Subjects
	7,  // 59: iamanager.v5.IAMPublicIdentityService.SubscribeSubjectsChanged:output_type -> iamanager.v5.Subjects
	9,  // 60: iamanager.v5.IAMPublicPermissionsService.GetPermissions:output_type -> iamanager.v5.PermissionsResponse
	10, // 61: iamanager.v5.IAMPublicNodesService.GetAllNodeIDs:output_type -> iamanager.v5.NodesID
	3,  // 62: iamanager.v5.IAMPublicNodesService.GetNodeInfo:output_type -> iamanager.v5.NodeInfo
	3,  // 63: iamanager.v5.IAMPublicNodesService.SubscribeNodeChanged:output_type -> iamanager.v5.NodeInfo
	32, // 64: iamanager.v5.IAMPublicNodesService.RegisterNode:output_type -> iamanager.v5.IAMIncomingMessages
	23, // 65: iamanager.v5.IAMNodesService.PauseNode:output_type -> iamanager.v5.PauseNodeResponse
	25, // 66: iamanager.v5.IAMNodesService.ResumeNode:output_type -> iamanager.v5.ResumeNodeResponse
	12, // 67: iamanager.v5.IAMProvisioningService.GetCertTypes:output_type -> iamanager.v5.CertTypes
	27, // 68: iamanager.v5.IAMProvisioningService.StartProvisioning:output_type -> iamanager.v5.StartProvisioningResponse
	29, // 69: iamanager.v5.IAMProvisioningService.FinishProvisioning:output_type -> iamanager.v5.FinishProvisioningResponse
	31, // 70: iamanager.v5.IAMProvisioningService.Deprovision:output_type -> iamanager.v5.DeprovisionResponse
	14, // 71: iamanager.v5.IAMCertificateService.CreateKey:output_type -> iamanager.v5.CreateKeyResponse
	16, // 72: iamanager.v5.IAMCertificateService.ApplyCert:output_type -> iamanager.v5.ApplyCertResponse
	19, // 73: iamanager.v5.IAMPermissionsService.RegisterInstance:output_type -> iamanager.v5.RegisterInstanceResponse
	38, // 74: iamanager.v5.IAMPermissionsService.UnregisterInstance:output_type -> google.protobuf.Empty
	55, // [55:75] is the sub-list for method output_type
	35, // [35:55] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_iamanager_v5_iamanager_proto_init() }
func file_iamanager_v5_iamanager_proto_init() {
	if File_iamanager_v5_iamanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_iamanager_v5_iamanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodesID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProvisioningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProvisioningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishProvisioningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishProvisioningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprovisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprovisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAMIncomingMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iamanager_v5_iamanager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAMOutgoingMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iamanager_v5_iamanager_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*IAMIncomingMessages_StartProvisioningRequest)(nil),
		(*IAMIncomingMessages_GetCertTypesRequest)(nil),
		(*IAMIncomingMessages_FinishProvisioningRequest)(nil),
		(*IAMIncomingMessages_DeprovisionRequest)(nil),
		(*IAMIncomingMessages_PauseNodeRequest)(nil),
		(*IAMIncomingMessages_ResumeNodeRequest)(nil),
		(*IAMIncomingMessages_CreateKeyRequest)(nil),
		(*IAMIncomingMessages_ApplyCertRequest)(nil),
	}
	file_iamanager_v5_iamanager_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*IAMOutgoingMessages_NodeInfo)(nil),
		(*IAMOutgoingMessages_StartProvisioningResponse)(nil),
		(*IAMOutgoingMessages_CertTypesResponse)(nil),
		(*IAMOutgoingMessages_FinishProvisioningResponse)(nil),
		(*IAMOutgoingMessages_DeprovisionResponse)(nil),
		(*IAMOutgoingMessages_PauseNodeResponse)(nil),
		(*IAMOutgoingMessages_ResumeNodeResponse)(nil),
		(*IAMOutgoingMessages_CreateKeyResponse)(nil),
		(*IAMOutgoingMessages_ApplyCertResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iamanager_v5_iamanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_iamanager_v5_iamanager_proto_goTypes,
		DependencyIndexes: file_iamanager_v5_iamanager_proto_depIdxs,
		MessageInfos:      file_iamanager_v5_iamanager_proto_msgTypes,
	}.Build()
	File_iamanager_v5_iamanager_proto = out.File
	file_iamanager_v5_iamanager_proto_rawDesc = nil
	file_iamanager_v5_iamanager_proto_goTypes = nil
	file_iamanager_v5_iamanager_proto_depIdxs = nil
}
