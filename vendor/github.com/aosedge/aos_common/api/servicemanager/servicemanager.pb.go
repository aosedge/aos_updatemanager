// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: servicemanager/v4/servicemanager.proto

package servicemanager

import (
	common "github.com/aosedge/aos_common/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectionEnum int32

const (
	ConnectionEnum_DISCONNECTED ConnectionEnum = 0
	ConnectionEnum_CONNECTED    ConnectionEnum = 1
)

// Enum value maps for ConnectionEnum.
var (
	ConnectionEnum_name = map[int32]string{
		0: "DISCONNECTED",
		1: "CONNECTED",
	}
	ConnectionEnum_value = map[string]int32{
		"DISCONNECTED": 0,
		"CONNECTED":    1,
	}
)

func (x ConnectionEnum) Enum() *ConnectionEnum {
	p := new(ConnectionEnum)
	*p = x
	return p
}

func (x ConnectionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_servicemanager_v4_servicemanager_proto_enumTypes[0].Descriptor()
}

func (ConnectionEnum) Type() protoreflect.EnumType {
	return &file_servicemanager_v4_servicemanager_proto_enumTypes[0]
}

func (x ConnectionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionEnum.Descriptor instead.
func (ConnectionEnum) EnumDescriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{0}
}

type SMIncomingMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SMIncomingMessage:
	//
	//	*SMIncomingMessages_GetNodeConfigStatus
	//	*SMIncomingMessages_CheckNodeConfig
	//	*SMIncomingMessages_SetNodeConfig
	//	*SMIncomingMessages_RunInstances
	//	*SMIncomingMessages_OverrideEnvVars
	//	*SMIncomingMessages_SystemLogRequest
	//	*SMIncomingMessages_InstanceLogRequest
	//	*SMIncomingMessages_InstanceCrashLogRequest
	//	*SMIncomingMessages_GetAverageMonitoring
	//	*SMIncomingMessages_ConnectionStatus
	//	*SMIncomingMessages_ImageContentInfo
	//	*SMIncomingMessages_ImageContent
	//	*SMIncomingMessages_UpdateNetworks
	//	*SMIncomingMessages_ClockSync
	SMIncomingMessage isSMIncomingMessages_SMIncomingMessage `protobuf_oneof:"SMIncomingMessage"`
}

func (x *SMIncomingMessages) Reset() {
	*x = SMIncomingMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMIncomingMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMIncomingMessages) ProtoMessage() {}

func (x *SMIncomingMessages) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMIncomingMessages.ProtoReflect.Descriptor instead.
func (*SMIncomingMessages) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{0}
}

func (m *SMIncomingMessages) GetSMIncomingMessage() isSMIncomingMessages_SMIncomingMessage {
	if m != nil {
		return m.SMIncomingMessage
	}
	return nil
}

func (x *SMIncomingMessages) GetGetNodeConfigStatus() *GetNodeConfigStatus {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_GetNodeConfigStatus); ok {
		return x.GetNodeConfigStatus
	}
	return nil
}

func (x *SMIncomingMessages) GetCheckNodeConfig() *CheckNodeConfig {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_CheckNodeConfig); ok {
		return x.CheckNodeConfig
	}
	return nil
}

func (x *SMIncomingMessages) GetSetNodeConfig() *SetNodeConfig {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_SetNodeConfig); ok {
		return x.SetNodeConfig
	}
	return nil
}

func (x *SMIncomingMessages) GetRunInstances() *RunInstances {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_RunInstances); ok {
		return x.RunInstances
	}
	return nil
}

func (x *SMIncomingMessages) GetOverrideEnvVars() *OverrideEnvVars {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_OverrideEnvVars); ok {
		return x.OverrideEnvVars
	}
	return nil
}

func (x *SMIncomingMessages) GetSystemLogRequest() *SystemLogRequest {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_SystemLogRequest); ok {
		return x.SystemLogRequest
	}
	return nil
}

func (x *SMIncomingMessages) GetInstanceLogRequest() *InstanceLogRequest {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_InstanceLogRequest); ok {
		return x.InstanceLogRequest
	}
	return nil
}

func (x *SMIncomingMessages) GetInstanceCrashLogRequest() *InstanceCrashLogRequest {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_InstanceCrashLogRequest); ok {
		return x.InstanceCrashLogRequest
	}
	return nil
}

func (x *SMIncomingMessages) GetGetAverageMonitoring() *GetAverageMonitoring {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_GetAverageMonitoring); ok {
		return x.GetAverageMonitoring
	}
	return nil
}

func (x *SMIncomingMessages) GetConnectionStatus() *ConnectionStatus {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_ConnectionStatus); ok {
		return x.ConnectionStatus
	}
	return nil
}

func (x *SMIncomingMessages) GetImageContentInfo() *ImageContentInfo {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_ImageContentInfo); ok {
		return x.ImageContentInfo
	}
	return nil
}

func (x *SMIncomingMessages) GetImageContent() *ImageContent {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_ImageContent); ok {
		return x.ImageContent
	}
	return nil
}

func (x *SMIncomingMessages) GetUpdateNetworks() *UpdateNetworks {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_UpdateNetworks); ok {
		return x.UpdateNetworks
	}
	return nil
}

func (x *SMIncomingMessages) GetClockSync() *ClockSync {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_ClockSync); ok {
		return x.ClockSync
	}
	return nil
}

type isSMIncomingMessages_SMIncomingMessage interface {
	isSMIncomingMessages_SMIncomingMessage()
}

type SMIncomingMessages_GetNodeConfigStatus struct {
	GetNodeConfigStatus *GetNodeConfigStatus `protobuf:"bytes,1,opt,name=get_node_config_status,json=getNodeConfigStatus,proto3,oneof"`
}

type SMIncomingMessages_CheckNodeConfig struct {
	CheckNodeConfig *CheckNodeConfig `protobuf:"bytes,2,opt,name=check_node_config,json=checkNodeConfig,proto3,oneof"`
}

type SMIncomingMessages_SetNodeConfig struct {
	SetNodeConfig *SetNodeConfig `protobuf:"bytes,3,opt,name=set_node_config,json=setNodeConfig,proto3,oneof"`
}

type SMIncomingMessages_RunInstances struct {
	RunInstances *RunInstances `protobuf:"bytes,4,opt,name=run_instances,json=runInstances,proto3,oneof"`
}

type SMIncomingMessages_OverrideEnvVars struct {
	OverrideEnvVars *OverrideEnvVars `protobuf:"bytes,5,opt,name=override_env_vars,json=overrideEnvVars,proto3,oneof"`
}

type SMIncomingMessages_SystemLogRequest struct {
	SystemLogRequest *SystemLogRequest `protobuf:"bytes,6,opt,name=system_log_request,json=systemLogRequest,proto3,oneof"`
}

type SMIncomingMessages_InstanceLogRequest struct {
	InstanceLogRequest *InstanceLogRequest `protobuf:"bytes,7,opt,name=instance_log_request,json=instanceLogRequest,proto3,oneof"`
}

type SMIncomingMessages_InstanceCrashLogRequest struct {
	InstanceCrashLogRequest *InstanceCrashLogRequest `protobuf:"bytes,8,opt,name=instance_crash_log_request,json=instanceCrashLogRequest,proto3,oneof"`
}

type SMIncomingMessages_GetAverageMonitoring struct {
	GetAverageMonitoring *GetAverageMonitoring `protobuf:"bytes,9,opt,name=get_average_monitoring,json=getAverageMonitoring,proto3,oneof"`
}

type SMIncomingMessages_ConnectionStatus struct {
	ConnectionStatus *ConnectionStatus `protobuf:"bytes,10,opt,name=connection_status,json=connectionStatus,proto3,oneof"`
}

type SMIncomingMessages_ImageContentInfo struct {
	ImageContentInfo *ImageContentInfo `protobuf:"bytes,11,opt,name=image_content_info,json=imageContentInfo,proto3,oneof"`
}

type SMIncomingMessages_ImageContent struct {
	ImageContent *ImageContent `protobuf:"bytes,12,opt,name=image_content,json=imageContent,proto3,oneof"`
}

type SMIncomingMessages_UpdateNetworks struct {
	UpdateNetworks *UpdateNetworks `protobuf:"bytes,13,opt,name=update_networks,json=updateNetworks,proto3,oneof"`
}

type SMIncomingMessages_ClockSync struct {
	ClockSync *ClockSync `protobuf:"bytes,14,opt,name=clock_sync,json=clockSync,proto3,oneof"`
}

func (*SMIncomingMessages_GetNodeConfigStatus) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_CheckNodeConfig) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_SetNodeConfig) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_RunInstances) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_OverrideEnvVars) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_SystemLogRequest) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_InstanceLogRequest) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_InstanceCrashLogRequest) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_GetAverageMonitoring) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_ConnectionStatus) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_ImageContentInfo) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_ImageContent) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_UpdateNetworks) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_ClockSync) isSMIncomingMessages_SMIncomingMessage() {}

type GetNodeConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodeConfigStatus) Reset() {
	*x = GetNodeConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeConfigStatus) ProtoMessage() {}

func (x *GetNodeConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeConfigStatus.ProtoReflect.Descriptor instead.
func (*GetNodeConfigStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{1}
}

type CheckNodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeConfig string `protobuf:"bytes,1,opt,name=node_config,json=nodeConfig,proto3" json:"node_config,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CheckNodeConfig) Reset() {
	*x = CheckNodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNodeConfig) ProtoMessage() {}

func (x *CheckNodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNodeConfig.ProtoReflect.Descriptor instead.
func (*CheckNodeConfig) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{2}
}

func (x *CheckNodeConfig) GetNodeConfig() string {
	if x != nil {
		return x.NodeConfig
	}
	return ""
}

func (x *CheckNodeConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type SetNodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeConfig string `protobuf:"bytes,1,opt,name=node_config,json=nodeConfig,proto3" json:"node_config,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SetNodeConfig) Reset() {
	*x = SetNodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeConfig) ProtoMessage() {}

func (x *SetNodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeConfig.ProtoReflect.Descriptor instead.
func (*SetNodeConfig) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{3}
}

func (x *SetNodeConfig) GetNodeConfig() string {
	if x != nil {
		return x.NodeConfig
	}
	return ""
}

func (x *SetNodeConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type UpdateNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks []*NetworkParameters `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *UpdateNetworks) Reset() {
	*x = UpdateNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworks) ProtoMessage() {}

func (x *UpdateNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworks.ProtoReflect.Descriptor instead.
func (*UpdateNetworks) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateNetworks) GetNetworks() []*NetworkParameters {
	if x != nil {
		return x.Networks
	}
	return nil
}

type ClockSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
}

func (x *ClockSync) Reset() {
	*x = ClockSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockSync) ProtoMessage() {}

func (x *ClockSync) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockSync.ProtoReflect.Descriptor instead.
func (*ClockSync) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{5}
}

func (x *ClockSync) GetCurrentTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentTime
	}
	return nil
}

type RunInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services     []*ServiceInfo  `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	Layers       []*LayerInfo    `protobuf:"bytes,2,rep,name=layers,proto3" json:"layers,omitempty"`
	Instances    []*InstanceInfo `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty"`
	ForceRestart bool            `protobuf:"varint,4,opt,name=force_restart,json=forceRestart,proto3" json:"force_restart,omitempty"`
}

func (x *RunInstances) Reset() {
	*x = RunInstances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInstances) ProtoMessage() {}

func (x *RunInstances) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInstances.ProtoReflect.Descriptor instead.
func (*RunInstances) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{6}
}

func (x *RunInstances) GetServices() []*ServiceInfo {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *RunInstances) GetLayers() []*LayerInfo {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *RunInstances) GetInstances() []*InstanceInfo {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *RunInstances) GetForceRestart() bool {
	if x != nil {
		return x.ForceRestart
	}
	return false
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId  string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ProviderId string `protobuf:"bytes,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	Version    string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Gid        uint32 `protobuf:"varint,4,opt,name=gid,proto3" json:"gid,omitempty"`
	Url        string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Sha256     []byte `protobuf:"bytes,6,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Size       uint64 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceInfo) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceInfo) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *ServiceInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServiceInfo) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *ServiceInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ServiceInfo) GetSha256() []byte {
	if x != nil {
		return x.Sha256
	}
	return nil
}

func (x *ServiceInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type LayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayerId string `protobuf:"bytes,1,opt,name=layer_id,json=layerId,proto3" json:"layer_id,omitempty"`
	Digest  string `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Url     string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Sha256  []byte `protobuf:"bytes,5,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Size    uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *LayerInfo) Reset() {
	*x = LayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerInfo) ProtoMessage() {}

func (x *LayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerInfo.ProtoReflect.Descriptor instead.
func (*LayerInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{8}
}

func (x *LayerInfo) GetLayerId() string {
	if x != nil {
		return x.LayerId
	}
	return ""
}

func (x *LayerInfo) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *LayerInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LayerInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LayerInfo) GetSha256() []byte {
	if x != nil {
		return x.Sha256
	}
	return nil
}

func (x *LayerInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FirewallRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstIp   string `protobuf:"bytes,1,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstPort string `protobuf:"bytes,2,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	Proto   string `protobuf:"bytes,3,opt,name=proto,proto3" json:"proto,omitempty"`
	SrcIp   string `protobuf:"bytes,4,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
}

func (x *FirewallRule) Reset() {
	*x = FirewallRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRule) ProtoMessage() {}

func (x *FirewallRule) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRule.ProtoReflect.Descriptor instead.
func (*FirewallRule) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{9}
}

func (x *FirewallRule) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *FirewallRule) GetDstPort() string {
	if x != nil {
		return x.DstPort
	}
	return ""
}

func (x *FirewallRule) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *FirewallRule) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

type NetworkParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId  string          `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Subnet     string          `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Ip         string          `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	VlanId     uint64          `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	DnsServers []string        `protobuf:"bytes,5,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	Rules      []*FirewallRule `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *NetworkParameters) Reset() {
	*x = NetworkParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkParameters) ProtoMessage() {}

func (x *NetworkParameters) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkParameters.ProtoReflect.Descriptor instead.
func (*NetworkParameters) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{10}
}

func (x *NetworkParameters) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *NetworkParameters) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *NetworkParameters) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetworkParameters) GetVlanId() uint64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *NetworkParameters) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *NetworkParameters) GetRules() []*FirewallRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance          *common.InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Uid               uint32                `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Priority          uint64                `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	StoragePath       string                `protobuf:"bytes,4,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	StatePath         string                `protobuf:"bytes,5,opt,name=state_path,json=statePath,proto3" json:"state_path,omitempty"`
	NetworkParameters *NetworkParameters    `protobuf:"bytes,6,opt,name=network_parameters,json=networkParameters,proto3" json:"network_parameters,omitempty"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{11}
}

func (x *InstanceInfo) GetInstance() *common.InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *InstanceInfo) GetPriority() uint64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *InstanceInfo) GetStoragePath() string {
	if x != nil {
		return x.StoragePath
	}
	return ""
}

func (x *InstanceInfo) GetStatePath() string {
	if x != nil {
		return x.StatePath
	}
	return ""
}

func (x *InstanceInfo) GetNetworkParameters() *NetworkParameters {
	if x != nil {
		return x.NetworkParameters
	}
	return nil
}

type OverrideEnvVars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvVars []*OverrideInstanceEnvVar `protobuf:"bytes,1,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
}

func (x *OverrideEnvVars) Reset() {
	*x = OverrideEnvVars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideEnvVars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideEnvVars) ProtoMessage() {}

func (x *OverrideEnvVars) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideEnvVars.ProtoReflect.Descriptor instead.
func (*OverrideEnvVars) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{12}
}

func (x *OverrideEnvVars) GetEnvVars() []*OverrideInstanceEnvVar {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

type OverrideInstanceEnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceFilter *InstanceFilter `protobuf:"bytes,1,opt,name=instance_filter,json=instanceFilter,proto3" json:"instance_filter,omitempty"`
	Variables      []*EnvVarInfo   `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *OverrideInstanceEnvVar) Reset() {
	*x = OverrideInstanceEnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideInstanceEnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideInstanceEnvVar) ProtoMessage() {}

func (x *OverrideInstanceEnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideInstanceEnvVar.ProtoReflect.Descriptor instead.
func (*OverrideInstanceEnvVar) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{13}
}

func (x *OverrideInstanceEnvVar) GetInstanceFilter() *InstanceFilter {
	if x != nil {
		return x.InstanceFilter
	}
	return nil
}

func (x *OverrideInstanceEnvVar) GetVariables() []*EnvVarInfo {
	if x != nil {
		return x.Variables
	}
	return nil
}

type EnvVarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Ttl   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *EnvVarInfo) Reset() {
	*x = EnvVarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVarInfo) ProtoMessage() {}

func (x *EnvVarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVarInfo.ProtoReflect.Descriptor instead.
func (*EnvVarInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{14}
}

func (x *EnvVarInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvVarInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EnvVarInfo) GetTtl() *timestamppb.Timestamp {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type SystemLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId string                 `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	From  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Till  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *SystemLogRequest) Reset() {
	*x = SystemLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLogRequest) ProtoMessage() {}

func (x *SystemLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLogRequest.ProtoReflect.Descriptor instead.
func (*SystemLogRequest) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{15}
}

func (x *SystemLogRequest) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *SystemLogRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SystemLogRequest) GetTill() *timestamppb.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

type InstanceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	SubjectId string `protobuf:"bytes,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	Instance  int64  `protobuf:"varint,3,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *InstanceFilter) Reset() {
	*x = InstanceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceFilter) ProtoMessage() {}

func (x *InstanceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceFilter.ProtoReflect.Descriptor instead.
func (*InstanceFilter) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{16}
}

func (x *InstanceFilter) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *InstanceFilter) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *InstanceFilter) GetInstance() int64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type InstanceLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId          string                 `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	InstanceFilter *InstanceFilter        `protobuf:"bytes,2,opt,name=instance_filter,json=instanceFilter,proto3" json:"instance_filter,omitempty"`
	From           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Till           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *InstanceLogRequest) Reset() {
	*x = InstanceLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceLogRequest) ProtoMessage() {}

func (x *InstanceLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceLogRequest.ProtoReflect.Descriptor instead.
func (*InstanceLogRequest) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{17}
}

func (x *InstanceLogRequest) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *InstanceLogRequest) GetInstanceFilter() *InstanceFilter {
	if x != nil {
		return x.InstanceFilter
	}
	return nil
}

func (x *InstanceLogRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *InstanceLogRequest) GetTill() *timestamppb.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

type InstanceCrashLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId          string                 `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	InstanceFilter *InstanceFilter        `protobuf:"bytes,2,opt,name=instance_filter,json=instanceFilter,proto3" json:"instance_filter,omitempty"`
	From           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Till           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *InstanceCrashLogRequest) Reset() {
	*x = InstanceCrashLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceCrashLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceCrashLogRequest) ProtoMessage() {}

func (x *InstanceCrashLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceCrashLogRequest.ProtoReflect.Descriptor instead.
func (*InstanceCrashLogRequest) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{18}
}

func (x *InstanceCrashLogRequest) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *InstanceCrashLogRequest) GetInstanceFilter() *InstanceFilter {
	if x != nil {
		return x.InstanceFilter
	}
	return nil
}

func (x *InstanceCrashLogRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *InstanceCrashLogRequest) GetTill() *timestamppb.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

type GetAverageMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAverageMonitoring) Reset() {
	*x = GetAverageMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAverageMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAverageMonitoring) ProtoMessage() {}

func (x *GetAverageMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAverageMonitoring.ProtoReflect.Descriptor instead.
func (*GetAverageMonitoring) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{19}
}

type ConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudStatus ConnectionEnum `protobuf:"varint,1,opt,name=cloud_status,json=cloudStatus,proto3,enum=servicemanager.v4.ConnectionEnum" json:"cloud_status,omitempty"`
}

func (x *ConnectionStatus) Reset() {
	*x = ConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStatus) ProtoMessage() {}

func (x *ConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStatus.ProtoReflect.Descriptor instead.
func (*ConnectionStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{20}
}

func (x *ConnectionStatus) GetCloudStatus() ConnectionEnum {
	if x != nil {
		return x.CloudStatus
	}
	return ConnectionEnum_DISCONNECTED
}

type ImageContentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  uint64            `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ImageFiles []*ImageFile      `protobuf:"bytes,2,rep,name=image_files,json=imageFiles,proto3" json:"image_files,omitempty"`
	Error      *common.ErrorInfo `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ImageContentInfo) Reset() {
	*x = ImageContentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageContentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageContentInfo) ProtoMessage() {}

func (x *ImageContentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageContentInfo.ProtoReflect.Descriptor instead.
func (*ImageContentInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{21}
}

func (x *ImageContentInfo) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ImageContentInfo) GetImageFiles() []*ImageFile {
	if x != nil {
		return x.ImageFiles
	}
	return nil
}

func (x *ImageContentInfo) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type ImageFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativePath string `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	Sha256       []byte `protobuf:"bytes,2,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Size         uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ImageFile) Reset() {
	*x = ImageFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageFile) ProtoMessage() {}

func (x *ImageFile) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageFile.ProtoReflect.Descriptor instead.
func (*ImageFile) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{22}
}

func (x *ImageFile) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *ImageFile) GetSha256() []byte {
	if x != nil {
		return x.Sha256
	}
	return nil
}

func (x *ImageFile) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ImageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RelativePath string `protobuf:"bytes,2,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	PartsCount   uint64 `protobuf:"varint,3,opt,name=parts_count,json=partsCount,proto3" json:"parts_count,omitempty"`
	Part         uint64 `protobuf:"varint,4,opt,name=part,proto3" json:"part,omitempty"`
	Data         []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ImageContent) Reset() {
	*x = ImageContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageContent) ProtoMessage() {}

func (x *ImageContent) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageContent.ProtoReflect.Descriptor instead.
func (*ImageContent) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{23}
}

func (x *ImageContent) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ImageContent) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *ImageContent) GetPartsCount() uint64 {
	if x != nil {
		return x.PartsCount
	}
	return 0
}

func (x *ImageContent) GetPart() uint64 {
	if x != nil {
		return x.Part
	}
	return 0
}

func (x *ImageContent) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Tag       string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// Types that are assignable to AlertItem:
	//
	//	*Alert_SystemQuotaAlert
	//	*Alert_InstanceQuotaAlert
	//	*Alert_ResourceValidateAlert
	//	*Alert_DeviceAllocateAlert
	//	*Alert_SystemAlert
	//	*Alert_CoreAlert
	//	*Alert_InstanceAlert
	AlertItem isAlert_AlertItem `protobuf_oneof:"AlertItem"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{24}
}

func (x *Alert) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Alert) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (m *Alert) GetAlertItem() isAlert_AlertItem {
	if m != nil {
		return m.AlertItem
	}
	return nil
}

func (x *Alert) GetSystemQuotaAlert() *SystemQuotaAlert {
	if x, ok := x.GetAlertItem().(*Alert_SystemQuotaAlert); ok {
		return x.SystemQuotaAlert
	}
	return nil
}

func (x *Alert) GetInstanceQuotaAlert() *InstanceQuotaAlert {
	if x, ok := x.GetAlertItem().(*Alert_InstanceQuotaAlert); ok {
		return x.InstanceQuotaAlert
	}
	return nil
}

func (x *Alert) GetResourceValidateAlert() *ResourceValidateAlert {
	if x, ok := x.GetAlertItem().(*Alert_ResourceValidateAlert); ok {
		return x.ResourceValidateAlert
	}
	return nil
}

func (x *Alert) GetDeviceAllocateAlert() *DeviceAllocateAlert {
	if x, ok := x.GetAlertItem().(*Alert_DeviceAllocateAlert); ok {
		return x.DeviceAllocateAlert
	}
	return nil
}

func (x *Alert) GetSystemAlert() *SystemAlert {
	if x, ok := x.GetAlertItem().(*Alert_SystemAlert); ok {
		return x.SystemAlert
	}
	return nil
}

func (x *Alert) GetCoreAlert() *CoreAlert {
	if x, ok := x.GetAlertItem().(*Alert_CoreAlert); ok {
		return x.CoreAlert
	}
	return nil
}

func (x *Alert) GetInstanceAlert() *InstanceAlert {
	if x, ok := x.GetAlertItem().(*Alert_InstanceAlert); ok {
		return x.InstanceAlert
	}
	return nil
}

type isAlert_AlertItem interface {
	isAlert_AlertItem()
}

type Alert_SystemQuotaAlert struct {
	SystemQuotaAlert *SystemQuotaAlert `protobuf:"bytes,3,opt,name=system_quota_alert,json=systemQuotaAlert,proto3,oneof"`
}

type Alert_InstanceQuotaAlert struct {
	InstanceQuotaAlert *InstanceQuotaAlert `protobuf:"bytes,4,opt,name=instance_quota_alert,json=instanceQuotaAlert,proto3,oneof"`
}

type Alert_ResourceValidateAlert struct {
	ResourceValidateAlert *ResourceValidateAlert `protobuf:"bytes,5,opt,name=resource_validate_alert,json=resourceValidateAlert,proto3,oneof"`
}

type Alert_DeviceAllocateAlert struct {
	DeviceAllocateAlert *DeviceAllocateAlert `protobuf:"bytes,6,opt,name=device_allocate_alert,json=deviceAllocateAlert,proto3,oneof"`
}

type Alert_SystemAlert struct {
	SystemAlert *SystemAlert `protobuf:"bytes,7,opt,name=system_alert,json=systemAlert,proto3,oneof"`
}

type Alert_CoreAlert struct {
	CoreAlert *CoreAlert `protobuf:"bytes,8,opt,name=core_alert,json=coreAlert,proto3,oneof"`
}

type Alert_InstanceAlert struct {
	InstanceAlert *InstanceAlert `protobuf:"bytes,9,opt,name=instance_alert,json=instanceAlert,proto3,oneof"`
}

func (*Alert_SystemQuotaAlert) isAlert_AlertItem() {}

func (*Alert_InstanceQuotaAlert) isAlert_AlertItem() {}

func (*Alert_ResourceValidateAlert) isAlert_AlertItem() {}

func (*Alert_DeviceAllocateAlert) isAlert_AlertItem() {}

func (*Alert_SystemAlert) isAlert_AlertItem() {}

func (*Alert_CoreAlert) isAlert_AlertItem() {}

func (*Alert_InstanceAlert) isAlert_AlertItem() {}

type SMOutgoingMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SMOutgoingMessage:
	//
	//	*SMOutgoingMessages_NodeConfigStatus
	//	*SMOutgoingMessages_RunInstancesStatus
	//	*SMOutgoingMessages_UpdateInstancesStatus
	//	*SMOutgoingMessages_OverrideEnvVarStatus
	//	*SMOutgoingMessages_Log
	//	*SMOutgoingMessages_InstantMonitoring
	//	*SMOutgoingMessages_AverageMonitoring
	//	*SMOutgoingMessages_Alert
	//	*SMOutgoingMessages_ImageContentRequest
	//	*SMOutgoingMessages_ClockSyncRequest
	SMOutgoingMessage isSMOutgoingMessages_SMOutgoingMessage `protobuf_oneof:"SMOutgoingMessage"`
}

func (x *SMOutgoingMessages) Reset() {
	*x = SMOutgoingMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMOutgoingMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMOutgoingMessages) ProtoMessage() {}

func (x *SMOutgoingMessages) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMOutgoingMessages.ProtoReflect.Descriptor instead.
func (*SMOutgoingMessages) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{25}
}

func (m *SMOutgoingMessages) GetSMOutgoingMessage() isSMOutgoingMessages_SMOutgoingMessage {
	if m != nil {
		return m.SMOutgoingMessage
	}
	return nil
}

func (x *SMOutgoingMessages) GetNodeConfigStatus() *NodeConfigStatus {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_NodeConfigStatus); ok {
		return x.NodeConfigStatus
	}
	return nil
}

func (x *SMOutgoingMessages) GetRunInstancesStatus() *RunInstancesStatus {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_RunInstancesStatus); ok {
		return x.RunInstancesStatus
	}
	return nil
}

func (x *SMOutgoingMessages) GetUpdateInstancesStatus() *UpdateInstancesStatus {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_UpdateInstancesStatus); ok {
		return x.UpdateInstancesStatus
	}
	return nil
}

func (x *SMOutgoingMessages) GetOverrideEnvVarStatus() *OverrideEnvVarStatus {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_OverrideEnvVarStatus); ok {
		return x.OverrideEnvVarStatus
	}
	return nil
}

func (x *SMOutgoingMessages) GetLog() *LogData {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_Log); ok {
		return x.Log
	}
	return nil
}

func (x *SMOutgoingMessages) GetInstantMonitoring() *InstantMonitoring {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_InstantMonitoring); ok {
		return x.InstantMonitoring
	}
	return nil
}

func (x *SMOutgoingMessages) GetAverageMonitoring() *AverageMonitoring {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_AverageMonitoring); ok {
		return x.AverageMonitoring
	}
	return nil
}

func (x *SMOutgoingMessages) GetAlert() *Alert {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_Alert); ok {
		return x.Alert
	}
	return nil
}

func (x *SMOutgoingMessages) GetImageContentRequest() *ImageContentRequest {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_ImageContentRequest); ok {
		return x.ImageContentRequest
	}
	return nil
}

func (x *SMOutgoingMessages) GetClockSyncRequest() *ClockSyncRequest {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_ClockSyncRequest); ok {
		return x.ClockSyncRequest
	}
	return nil
}

type isSMOutgoingMessages_SMOutgoingMessage interface {
	isSMOutgoingMessages_SMOutgoingMessage()
}

type SMOutgoingMessages_NodeConfigStatus struct {
	NodeConfigStatus *NodeConfigStatus `protobuf:"bytes,2,opt,name=node_config_status,json=nodeConfigStatus,proto3,oneof"`
}

type SMOutgoingMessages_RunInstancesStatus struct {
	RunInstancesStatus *RunInstancesStatus `protobuf:"bytes,3,opt,name=run_instances_status,json=runInstancesStatus,proto3,oneof"`
}

type SMOutgoingMessages_UpdateInstancesStatus struct {
	UpdateInstancesStatus *UpdateInstancesStatus `protobuf:"bytes,4,opt,name=update_instances_status,json=updateInstancesStatus,proto3,oneof"`
}

type SMOutgoingMessages_OverrideEnvVarStatus struct {
	OverrideEnvVarStatus *OverrideEnvVarStatus `protobuf:"bytes,5,opt,name=override_env_var_status,json=overrideEnvVarStatus,proto3,oneof"`
}

type SMOutgoingMessages_Log struct {
	Log *LogData `protobuf:"bytes,6,opt,name=log,proto3,oneof"`
}

type SMOutgoingMessages_InstantMonitoring struct {
	InstantMonitoring *InstantMonitoring `protobuf:"bytes,7,opt,name=instant_monitoring,json=instantMonitoring,proto3,oneof"`
}

type SMOutgoingMessages_AverageMonitoring struct {
	AverageMonitoring *AverageMonitoring `protobuf:"bytes,8,opt,name=average_monitoring,json=averageMonitoring,proto3,oneof"`
}

type SMOutgoingMessages_Alert struct {
	Alert *Alert `protobuf:"bytes,9,opt,name=alert,proto3,oneof"`
}

type SMOutgoingMessages_ImageContentRequest struct {
	ImageContentRequest *ImageContentRequest `protobuf:"bytes,10,opt,name=image_content_request,json=imageContentRequest,proto3,oneof"`
}

type SMOutgoingMessages_ClockSyncRequest struct {
	ClockSyncRequest *ClockSyncRequest `protobuf:"bytes,11,opt,name=clock_sync_request,json=clockSyncRequest,proto3,oneof"`
}

func (*SMOutgoingMessages_NodeConfigStatus) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_RunInstancesStatus) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_UpdateInstancesStatus) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_OverrideEnvVarStatus) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_Log) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_InstantMonitoring) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_AverageMonitoring) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_Alert) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_ImageContentRequest) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_ClockSyncRequest) isSMOutgoingMessages_SMOutgoingMessage() {}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Types     []string `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	TotalSize uint64   `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{26}
}

func (x *Partition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Partition) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Partition) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type NodeConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   string            `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeType string            `protobuf:"bytes,2,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	Version  string            `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Error    *common.ErrorInfo `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *NodeConfigStatus) Reset() {
	*x = NodeConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigStatus) ProtoMessage() {}

func (x *NodeConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigStatus.ProtoReflect.Descriptor instead.
func (*NodeConfigStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{27}
}

func (x *NodeConfigStatus) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeConfigStatus) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *NodeConfigStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NodeConfigStatus) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type RunInstancesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*InstanceStatus `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *RunInstancesStatus) Reset() {
	*x = RunInstancesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunInstancesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInstancesStatus) ProtoMessage() {}

func (x *RunInstancesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInstancesStatus.ProtoReflect.Descriptor instead.
func (*RunInstancesStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{28}
}

func (x *RunInstancesStatus) GetInstances() []*InstanceStatus {
	if x != nil {
		return x.Instances
	}
	return nil
}

type UpdateInstancesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*InstanceStatus `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *UpdateInstancesStatus) Reset() {
	*x = UpdateInstancesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstancesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstancesStatus) ProtoMessage() {}

func (x *UpdateInstancesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstancesStatus.ProtoReflect.Descriptor instead.
func (*UpdateInstancesStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateInstancesStatus) GetInstances() []*InstanceStatus {
	if x != nil {
		return x.Instances
	}
	return nil
}

type InstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance       *common.InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	ServiceVersion string                `protobuf:"bytes,2,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	RunState       string                `protobuf:"bytes,3,opt,name=run_state,json=runState,proto3" json:"run_state,omitempty"`
	ErrorInfo      *common.ErrorInfo     `protobuf:"bytes,4,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
}

func (x *InstanceStatus) Reset() {
	*x = InstanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatus) ProtoMessage() {}

func (x *InstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatus.ProtoReflect.Descriptor instead.
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{30}
}

func (x *InstanceStatus) GetInstance() *common.InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceStatus) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *InstanceStatus) GetRunState() string {
	if x != nil {
		return x.RunState
	}
	return ""
}

func (x *InstanceStatus) GetErrorInfo() *common.ErrorInfo {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

type OverrideEnvVarStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvVarsStatus []*EnvVarInstanceStatus `protobuf:"bytes,1,rep,name=env_vars_status,json=envVarsStatus,proto3" json:"env_vars_status,omitempty"`
	Error         *common.ErrorInfo       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OverrideEnvVarStatus) Reset() {
	*x = OverrideEnvVarStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideEnvVarStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideEnvVarStatus) ProtoMessage() {}

func (x *OverrideEnvVarStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideEnvVarStatus.ProtoReflect.Descriptor instead.
func (*OverrideEnvVarStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{31}
}

func (x *OverrideEnvVarStatus) GetEnvVarsStatus() []*EnvVarInstanceStatus {
	if x != nil {
		return x.EnvVarsStatus
	}
	return nil
}

func (x *OverrideEnvVarStatus) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type EnvVarInstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceFilter *InstanceFilter `protobuf:"bytes,1,opt,name=instance_filter,json=instanceFilter,proto3" json:"instance_filter,omitempty"`
	Statuses       []*EnvVarStatus `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *EnvVarInstanceStatus) Reset() {
	*x = EnvVarInstanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVarInstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVarInstanceStatus) ProtoMessage() {}

func (x *EnvVarInstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVarInstanceStatus.ProtoReflect.Descriptor instead.
func (*EnvVarInstanceStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{32}
}

func (x *EnvVarInstanceStatus) GetInstanceFilter() *InstanceFilter {
	if x != nil {
		return x.InstanceFilter
	}
	return nil
}

func (x *EnvVarInstanceStatus) GetStatuses() []*EnvVarStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type EnvVarStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Error *common.ErrorInfo `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EnvVarStatus) Reset() {
	*x = EnvVarStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVarStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVarStatus) ProtoMessage() {}

func (x *EnvVarStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVarStatus.ProtoReflect.Descriptor instead.
func (*EnvVarStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{33}
}

func (x *EnvVarStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvVarStatus) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type LogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId     string            `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	PartCount uint64            `protobuf:"varint,2,opt,name=part_count,json=partCount,proto3" json:"part_count,omitempty"`
	Part      uint64            `protobuf:"varint,3,opt,name=part,proto3" json:"part,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Status    string            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Error     *common.ErrorInfo `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *LogData) Reset() {
	*x = LogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogData) ProtoMessage() {}

func (x *LogData) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogData.ProtoReflect.Descriptor instead.
func (*LogData) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{34}
}

func (x *LogData) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *LogData) GetPartCount() uint64 {
	if x != nil {
		return x.PartCount
	}
	return 0
}

func (x *LogData) GetPart() uint64 {
	if x != nil {
		return x.Part
	}
	return 0
}

func (x *LogData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LogData) GetError() *common.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type InstantMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeMonitoring      *MonitoringData       `protobuf:"bytes,1,opt,name=node_monitoring,json=nodeMonitoring,proto3" json:"node_monitoring,omitempty"`
	InstancesMonitoring []*InstanceMonitoring `protobuf:"bytes,2,rep,name=instances_monitoring,json=instancesMonitoring,proto3" json:"instances_monitoring,omitempty"`
}

func (x *InstantMonitoring) Reset() {
	*x = InstantMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstantMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantMonitoring) ProtoMessage() {}

func (x *InstantMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantMonitoring.ProtoReflect.Descriptor instead.
func (*InstantMonitoring) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{35}
}

func (x *InstantMonitoring) GetNodeMonitoring() *MonitoringData {
	if x != nil {
		return x.NodeMonitoring
	}
	return nil
}

func (x *InstantMonitoring) GetInstancesMonitoring() []*InstanceMonitoring {
	if x != nil {
		return x.InstancesMonitoring
	}
	return nil
}

type AverageMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeMonitoring      *MonitoringData       `protobuf:"bytes,1,opt,name=node_monitoring,json=nodeMonitoring,proto3" json:"node_monitoring,omitempty"`
	InstancesMonitoring []*InstanceMonitoring `protobuf:"bytes,2,rep,name=instances_monitoring,json=instancesMonitoring,proto3" json:"instances_monitoring,omitempty"`
}

func (x *AverageMonitoring) Reset() {
	*x = AverageMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AverageMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AverageMonitoring) ProtoMessage() {}

func (x *AverageMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AverageMonitoring.ProtoReflect.Descriptor instead.
func (*AverageMonitoring) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{36}
}

func (x *AverageMonitoring) GetNodeMonitoring() *MonitoringData {
	if x != nil {
		return x.NodeMonitoring
	}
	return nil
}

func (x *AverageMonitoring) GetInstancesMonitoring() []*InstanceMonitoring {
	if x != nil {
		return x.InstancesMonitoring
	}
	return nil
}

type MonitoringData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ram        uint64                 `protobuf:"varint,1,opt,name=ram,proto3" json:"ram,omitempty"`
	Cpu        uint64                 `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Partitions []*PartitionUsage      `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"`
	Download   uint64                 `protobuf:"varint,4,opt,name=download,proto3" json:"download,omitempty"`
	Upload     uint64                 `protobuf:"varint,5,opt,name=upload,proto3" json:"upload,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *MonitoringData) Reset() {
	*x = MonitoringData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringData) ProtoMessage() {}

func (x *MonitoringData) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringData.ProtoReflect.Descriptor instead.
func (*MonitoringData) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{37}
}

func (x *MonitoringData) GetRam() uint64 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *MonitoringData) GetCpu() uint64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *MonitoringData) GetPartitions() []*PartitionUsage {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *MonitoringData) GetDownload() uint64 {
	if x != nil {
		return x.Download
	}
	return 0
}

func (x *MonitoringData) GetUpload() uint64 {
	if x != nil {
		return x.Upload
	}
	return 0
}

func (x *MonitoringData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type PartitionUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UsedSize uint64 `protobuf:"varint,2,opt,name=used_size,json=usedSize,proto3" json:"used_size,omitempty"`
}

func (x *PartitionUsage) Reset() {
	*x = PartitionUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionUsage) ProtoMessage() {}

func (x *PartitionUsage) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionUsage.ProtoReflect.Descriptor instead.
func (*PartitionUsage) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{38}
}

func (x *PartitionUsage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionUsage) GetUsedSize() uint64 {
	if x != nil {
		return x.UsedSize
	}
	return 0
}

type InstanceMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance       *common.InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	MonitoringData *MonitoringData       `protobuf:"bytes,2,opt,name=monitoring_data,json=monitoringData,proto3" json:"monitoring_data,omitempty"`
}

func (x *InstanceMonitoring) Reset() {
	*x = InstanceMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMonitoring) ProtoMessage() {}

func (x *InstanceMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMonitoring.ProtoReflect.Descriptor instead.
func (*InstanceMonitoring) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{39}
}

func (x *InstanceMonitoring) GetInstance() *common.InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceMonitoring) GetMonitoringData() *MonitoringData {
	if x != nil {
		return x.MonitoringData
	}
	return nil
}

type ImageContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	RequestId   uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (x *ImageContentRequest) Reset() {
	*x = ImageContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageContentRequest) ProtoMessage() {}

func (x *ImageContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageContentRequest.ProtoReflect.Descriptor instead.
func (*ImageContentRequest) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{40}
}

func (x *ImageContentRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImageContentRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ImageContentRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type ClockSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClockSyncRequest) Reset() {
	*x = ClockSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockSyncRequest) ProtoMessage() {}

func (x *ClockSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockSyncRequest.ProtoReflect.Descriptor instead.
func (*ClockSyncRequest) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{41}
}

type SystemQuotaAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter string `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Value     uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SystemQuotaAlert) Reset() {
	*x = SystemQuotaAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemQuotaAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemQuotaAlert) ProtoMessage() {}

func (x *SystemQuotaAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemQuotaAlert.ProtoReflect.Descriptor instead.
func (*SystemQuotaAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{42}
}

func (x *SystemQuotaAlert) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *SystemQuotaAlert) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SystemQuotaAlert) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type InstanceQuotaAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance  *common.InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Parameter string                `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Value     uint64                `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Status    string                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InstanceQuotaAlert) Reset() {
	*x = InstanceQuotaAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceQuotaAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceQuotaAlert) ProtoMessage() {}

func (x *InstanceQuotaAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceQuotaAlert.ProtoReflect.Descriptor instead.
func (*InstanceQuotaAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{43}
}

func (x *InstanceQuotaAlert) GetInstance() *common.InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceQuotaAlert) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *InstanceQuotaAlert) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *InstanceQuotaAlert) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DeviceAllocateAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *common.InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Device   string                `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Message  string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeviceAllocateAlert) Reset() {
	*x = DeviceAllocateAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAllocateAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAllocateAlert) ProtoMessage() {}

func (x *DeviceAllocateAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAllocateAlert.ProtoReflect.Descriptor instead.
func (*DeviceAllocateAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{44}
}

func (x *DeviceAllocateAlert) GetInstance() *common.InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *DeviceAllocateAlert) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DeviceAllocateAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ResourceValidateAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Errors []*common.ErrorInfo `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ResourceValidateAlert) Reset() {
	*x = ResourceValidateAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceValidateAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceValidateAlert) ProtoMessage() {}

func (x *ResourceValidateAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceValidateAlert.ProtoReflect.Descriptor instead.
func (*ResourceValidateAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{45}
}

func (x *ResourceValidateAlert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceValidateAlert) GetErrors() []*common.ErrorInfo {
	if x != nil {
		return x.Errors
	}
	return nil
}

type SystemAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SystemAlert) Reset() {
	*x = SystemAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemAlert) ProtoMessage() {}

func (x *SystemAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemAlert.ProtoReflect.Descriptor instead.
func (*SystemAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{46}
}

func (x *SystemAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CoreAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreComponent string `protobuf:"bytes,1,opt,name=core_component,json=coreComponent,proto3" json:"core_component,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CoreAlert) Reset() {
	*x = CoreAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreAlert) ProtoMessage() {}

func (x *CoreAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreAlert.ProtoReflect.Descriptor instead.
func (*CoreAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{47}
}

func (x *CoreAlert) GetCoreComponent() string {
	if x != nil {
		return x.CoreComponent
	}
	return ""
}

func (x *CoreAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type InstanceAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance       *common.InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	ServiceVersion string                `protobuf:"bytes,2,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	Message        string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InstanceAlert) Reset() {
	*x = InstanceAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAlert) ProtoMessage() {}

func (x *InstanceAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v4_servicemanager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAlert.ProtoReflect.Descriptor instead.
func (*InstanceAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v4_servicemanager_proto_rawDescGZIP(), []int{48}
}

func (x *InstanceAlert) GetInstance() *common.InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceAlert) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *InstanceAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_servicemanager_v4_servicemanager_proto protoreflect.FileDescriptor

var file_servicemanager_v4_servicemanager_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x34, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x09, 0x0a, 0x12, 0x53, 0x4d, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x67,
	0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0f,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x34, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x50, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x76,
	0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x34, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x72, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72,
	0x61, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a,
	0x16, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x34, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x52,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x34, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x34, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x3d, 0x0a,
	0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x13, 0x0a, 0x11,
	0x53, 0x4d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x4a, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x34, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x09, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x6d, 0x0a, 0x0c,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x22, 0xcb, 0x01, 0x0a, 0x11,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x53, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f,
	0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x22, 0xa1,
	0x01, 0x0a, 0x16, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x22, 0x64, 0x0a, 0x0a, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x6f, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6c, 0x6c, 0x22, 0x6a, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xd7, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x4a,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x22, 0xdc, 0x01, 0x0a, 0x17, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x4a, 0x0a,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x58, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x10,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x09, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x05, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x53, 0x0a, 0x12,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x59, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x62, 0x0a, 0x17,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x34, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x5c, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x34, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x43,
	0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xe2, 0x06, 0x0a, 0x12, 0x53,
	0x4d, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x53, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x34, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x12, 0x72,
	0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x62, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x15,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x55, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x55,
	0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x5c, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x53, 0x4d,
	0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x54, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x58, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x14,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x34, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xb9, 0x01,
	0x0a, 0x11, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x58, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x41, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a,
	0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x10,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x96, 0x01, 0x0a,
	0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0x27, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x09, 0x43, 0x6f, 0x72, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x31, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x32, 0x6d, 0x0a, 0x09, 0x53, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x60, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x4d, 0x12,
	0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x34, 0x2e, 0x53, 0x4d, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x4d, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_servicemanager_v4_servicemanager_proto_rawDescOnce sync.Once
	file_servicemanager_v4_servicemanager_proto_rawDescData = file_servicemanager_v4_servicemanager_proto_rawDesc
)

func file_servicemanager_v4_servicemanager_proto_rawDescGZIP() []byte {
	file_servicemanager_v4_servicemanager_proto_rawDescOnce.Do(func() {
		file_servicemanager_v4_servicemanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_servicemanager_v4_servicemanager_proto_rawDescData)
	})
	return file_servicemanager_v4_servicemanager_proto_rawDescData
}

var file_servicemanager_v4_servicemanager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_servicemanager_v4_servicemanager_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_servicemanager_v4_servicemanager_proto_goTypes = []interface{}{
	(ConnectionEnum)(0),             // 0: servicemanager.v4.ConnectionEnum
	(*SMIncomingMessages)(nil),      // 1: servicemanager.v4.SMIncomingMessages
	(*GetNodeConfigStatus)(nil),     // 2: servicemanager.v4.GetNodeConfigStatus
	(*CheckNodeConfig)(nil),         // 3: servicemanager.v4.CheckNodeConfig
	(*SetNodeConfig)(nil),           // 4: servicemanager.v4.SetNodeConfig
	(*UpdateNetworks)(nil),          // 5: servicemanager.v4.UpdateNetworks
	(*ClockSync)(nil),               // 6: servicemanager.v4.ClockSync
	(*RunInstances)(nil),            // 7: servicemanager.v4.RunInstances
	(*ServiceInfo)(nil),             // 8: servicemanager.v4.ServiceInfo
	(*LayerInfo)(nil),               // 9: servicemanager.v4.LayerInfo
	(*FirewallRule)(nil),            // 10: servicemanager.v4.FirewallRule
	(*NetworkParameters)(nil),       // 11: servicemanager.v4.NetworkParameters
	(*InstanceInfo)(nil),            // 12: servicemanager.v4.InstanceInfo
	(*OverrideEnvVars)(nil),         // 13: servicemanager.v4.OverrideEnvVars
	(*OverrideInstanceEnvVar)(nil),  // 14: servicemanager.v4.OverrideInstanceEnvVar
	(*EnvVarInfo)(nil),              // 15: servicemanager.v4.EnvVarInfo
	(*SystemLogRequest)(nil),        // 16: servicemanager.v4.SystemLogRequest
	(*InstanceFilter)(nil),          // 17: servicemanager.v4.InstanceFilter
	(*InstanceLogRequest)(nil),      // 18: servicemanager.v4.InstanceLogRequest
	(*InstanceCrashLogRequest)(nil), // 19: servicemanager.v4.InstanceCrashLogRequest
	(*GetAverageMonitoring)(nil),    // 20: servicemanager.v4.GetAverageMonitoring
	(*ConnectionStatus)(nil),        // 21: servicemanager.v4.ConnectionStatus
	(*ImageContentInfo)(nil),        // 22: servicemanager.v4.ImageContentInfo
	(*ImageFile)(nil),               // 23: servicemanager.v4.ImageFile
	(*ImageContent)(nil),            // 24: servicemanager.v4.ImageContent
	(*Alert)(nil),                   // 25: servicemanager.v4.Alert
	(*SMOutgoingMessages)(nil),      // 26: servicemanager.v4.SMOutgoingMessages
	(*Partition)(nil),               // 27: servicemanager.v4.Partition
	(*NodeConfigStatus)(nil),        // 28: servicemanager.v4.NodeConfigStatus
	(*RunInstancesStatus)(nil),      // 29: servicemanager.v4.RunInstancesStatus
	(*UpdateInstancesStatus)(nil),   // 30: servicemanager.v4.UpdateInstancesStatus
	(*InstanceStatus)(nil),          // 31: servicemanager.v4.InstanceStatus
	(*OverrideEnvVarStatus)(nil),    // 32: servicemanager.v4.OverrideEnvVarStatus
	(*EnvVarInstanceStatus)(nil),    // 33: servicemanager.v4.EnvVarInstanceStatus
	(*EnvVarStatus)(nil),            // 34: servicemanager.v4.EnvVarStatus
	(*LogData)(nil),                 // 35: servicemanager.v4.LogData
	(*InstantMonitoring)(nil),       // 36: servicemanager.v4.InstantMonitoring
	(*AverageMonitoring)(nil),       // 37: servicemanager.v4.AverageMonitoring
	(*MonitoringData)(nil),          // 38: servicemanager.v4.MonitoringData
	(*PartitionUsage)(nil),          // 39: servicemanager.v4.PartitionUsage
	(*InstanceMonitoring)(nil),      // 40: servicemanager.v4.InstanceMonitoring
	(*ImageContentRequest)(nil),     // 41: servicemanager.v4.ImageContentRequest
	(*ClockSyncRequest)(nil),        // 42: servicemanager.v4.ClockSyncRequest
	(*SystemQuotaAlert)(nil),        // 43: servicemanager.v4.SystemQuotaAlert
	(*InstanceQuotaAlert)(nil),      // 44: servicemanager.v4.InstanceQuotaAlert
	(*DeviceAllocateAlert)(nil),     // 45: servicemanager.v4.DeviceAllocateAlert
	(*ResourceValidateAlert)(nil),   // 46: servicemanager.v4.ResourceValidateAlert
	(*SystemAlert)(nil),             // 47: servicemanager.v4.SystemAlert
	(*CoreAlert)(nil),               // 48: servicemanager.v4.CoreAlert
	(*InstanceAlert)(nil),           // 49: servicemanager.v4.InstanceAlert
	(*timestamppb.Timestamp)(nil),   // 50: google.protobuf.Timestamp
	(*common.InstanceIdent)(nil),    // 51: common.v1.InstanceIdent
	(*common.ErrorInfo)(nil),        // 52: common.v1.ErrorInfo
}
var file_servicemanager_v4_servicemanager_proto_depIdxs = []int32{
	2,  // 0: servicemanager.v4.SMIncomingMessages.get_node_config_status:type_name -> servicemanager.v4.GetNodeConfigStatus
	3,  // 1: servicemanager.v4.SMIncomingMessages.check_node_config:type_name -> servicemanager.v4.CheckNodeConfig
	4,  // 2: servicemanager.v4.SMIncomingMessages.set_node_config:type_name -> servicemanager.v4.SetNodeConfig
	7,  // 3: servicemanager.v4.SMIncomingMessages.run_instances:type_name -> servicemanager.v4.RunInstances
	13, // 4: servicemanager.v4.SMIncomingMessages.override_env_vars:type_name -> servicemanager.v4.OverrideEnvVars
	16, // 5: servicemanager.v4.SMIncomingMessages.system_log_request:type_name -> servicemanager.v4.SystemLogRequest
	18, // 6: servicemanager.v4.SMIncomingMessages.instance_log_request:type_name -> servicemanager.v4.InstanceLogRequest
	19, // 7: servicemanager.v4.SMIncomingMessages.instance_crash_log_request:type_name -> servicemanager.v4.InstanceCrashLogRequest
	20, // 8: servicemanager.v4.SMIncomingMessages.get_average_monitoring:type_name -> servicemanager.v4.GetAverageMonitoring
	21, // 9: servicemanager.v4.SMIncomingMessages.connection_status:type_name -> servicemanager.v4.ConnectionStatus
	22, // 10: servicemanager.v4.SMIncomingMessages.image_content_info:type_name -> servicemanager.v4.ImageContentInfo
	24, // 11: servicemanager.v4.SMIncomingMessages.image_content:type_name -> servicemanager.v4.ImageContent
	5,  // 12: servicemanager.v4.SMIncomingMessages.update_networks:type_name -> servicemanager.v4.UpdateNetworks
	6,  // 13: servicemanager.v4.SMIncomingMessages.clock_sync:type_name -> servicemanager.v4.ClockSync
	11, // 14: servicemanager.v4.UpdateNetworks.networks:type_name -> servicemanager.v4.NetworkParameters
	50, // 15: servicemanager.v4.ClockSync.current_time:type_name -> google.protobuf.Timestamp
	8,  // 16: servicemanager.v4.RunInstances.services:type_name -> servicemanager.v4.ServiceInfo
	9,  // 17: servicemanager.v4.RunInstances.layers:type_name -> servicemanager.v4.LayerInfo
	12, // 18: servicemanager.v4.RunInstances.instances:type_name -> servicemanager.v4.InstanceInfo
	10, // 19: servicemanager.v4.NetworkParameters.rules:type_name -> servicemanager.v4.FirewallRule
	51, // 20: servicemanager.v4.InstanceInfo.instance:type_name -> common.v1.InstanceIdent
	11, // 21: servicemanager.v4.InstanceInfo.network_parameters:type_name -> servicemanager.v4.NetworkParameters
	14, // 22: servicemanager.v4.OverrideEnvVars.env_vars:type_name -> servicemanager.v4.OverrideInstanceEnvVar
	17, // 23: servicemanager.v4.OverrideInstanceEnvVar.instance_filter:type_name -> servicemanager.v4.InstanceFilter
	15, // 24: servicemanager.v4.OverrideInstanceEnvVar.variables:type_name -> servicemanager.v4.EnvVarInfo
	50, // 25: servicemanager.v4.EnvVarInfo.ttl:type_name -> google.protobuf.Timestamp
	50, // 26: servicemanager.v4.SystemLogRequest.from:type_name -> google.protobuf.Timestamp
	50, // 27: servicemanager.v4.SystemLogRequest.till:type_name -> google.protobuf.Timestamp
	17, // 28: servicemanager.v4.InstanceLogRequest.instance_filter:type_name -> servicemanager.v4.InstanceFilter
	50, // 29: servicemanager.v4.InstanceLogRequest.from:type_name -> google.protobuf.Timestamp
	50, // 30: servicemanager.v4.InstanceLogRequest.till:type_name -> google.protobuf.Timestamp
	17, // 31: servicemanager.v4.InstanceCrashLogRequest.instance_filter:type_name -> servicemanager.v4.InstanceFilter
	50, // 32: servicemanager.v4.InstanceCrashLogRequest.from:type_name -> google.protobuf.Timestamp
	50, // 33: servicemanager.v4.InstanceCrashLogRequest.till:type_name -> google.protobuf.Timestamp
	0,  // 34: servicemanager.v4.ConnectionStatus.cloud_status:type_name -> servicemanager.v4.ConnectionEnum
	23, // 35: servicemanager.v4.ImageContentInfo.image_files:type_name -> servicemanager.v4.ImageFile
	52, // 36: servicemanager.v4.ImageContentInfo.error:type_name -> common.v1.ErrorInfo
	50, // 37: servicemanager.v4.Alert.timestamp:type_name -> google.protobuf.Timestamp
	43, // 38: servicemanager.v4.Alert.system_quota_alert:type_name -> servicemanager.v4.SystemQuotaAlert
	44, // 39: servicemanager.v4.Alert.instance_quota_alert:type_name -> servicemanager.v4.InstanceQuotaAlert
	46, // 40: servicemanager.v4.Alert.resource_validate_alert:type_name -> servicemanager.v4.ResourceValidateAlert
	45, // 41: servicemanager.v4.Alert.device_allocate_alert:type_name -> servicemanager.v4.DeviceAllocateAlert
	47, // 42: servicemanager.v4.Alert.system_alert:type_name -> servicemanager.v4.SystemAlert
	48, // 43: servicemanager.v4.Alert.core_alert:type_name -> servicemanager.v4.CoreAlert
	49, // 44: servicemanager.v4.Alert.instance_alert:type_name -> servicemanager.v4.InstanceAlert
	28, // 45: servicemanager.v4.SMOutgoingMessages.node_config_status:type_name -> servicemanager.v4.NodeConfigStatus
	29, // 46: servicemanager.v4.SMOutgoingMessages.run_instances_status:type_name -> servicemanager.v4.RunInstancesStatus
	30, // 47: servicemanager.v4.SMOutgoingMessages.update_instances_status:type_name -> servicemanager.v4.UpdateInstancesStatus
	32, // 48: servicemanager.v4.SMOutgoingMessages.override_env_var_status:type_name -> servicemanager.v4.OverrideEnvVarStatus
	35, // 49: servicemanager.v4.SMOutgoingMessages.log:type_name -> servicemanager.v4.LogData
	36, // 50: servicemanager.v4.SMOutgoingMessages.instant_monitoring:type_name -> servicemanager.v4.InstantMonitoring
	37, // 51: servicemanager.v4.SMOutgoingMessages.average_monitoring:type_name -> servicemanager.v4.AverageMonitoring
	25, // 52: servicemanager.v4.SMOutgoingMessages.alert:type_name -> servicemanager.v4.Alert
	41, // 53: servicemanager.v4.SMOutgoingMessages.image_content_request:type_name -> servicemanager.v4.ImageContentRequest
	42, // 54: servicemanager.v4.SMOutgoingMessages.clock_sync_request:type_name -> servicemanager.v4.ClockSyncRequest
	52, // 55: servicemanager.v4.NodeConfigStatus.error:type_name -> common.v1.ErrorInfo
	31, // 56: servicemanager.v4.RunInstancesStatus.instances:type_name -> servicemanager.v4.InstanceStatus
	31, // 57: servicemanager.v4.UpdateInstancesStatus.instances:type_name -> servicemanager.v4.InstanceStatus
	51, // 58: servicemanager.v4.InstanceStatus.instance:type_name -> common.v1.InstanceIdent
	52, // 59: servicemanager.v4.InstanceStatus.error_info:type_name -> common.v1.ErrorInfo
	33, // 60: servicemanager.v4.OverrideEnvVarStatus.env_vars_status:type_name -> servicemanager.v4.EnvVarInstanceStatus
	52, // 61: servicemanager.v4.OverrideEnvVarStatus.error:type_name -> common.v1.ErrorInfo
	17, // 62: servicemanager.v4.EnvVarInstanceStatus.instance_filter:type_name -> servicemanager.v4.InstanceFilter
	34, // 63: servicemanager.v4.EnvVarInstanceStatus.statuses:type_name -> servicemanager.v4.EnvVarStatus
	52, // 64: servicemanager.v4.EnvVarStatus.error:type_name -> common.v1.ErrorInfo
	52, // 65: servicemanager.v4.LogData.error:type_name -> common.v1.ErrorInfo
	38, // 66: servicemanager.v4.InstantMonitoring.node_monitoring:type_name -> servicemanager.v4.MonitoringData
	40, // 67: servicemanager.v4.InstantMonitoring.instances_monitoring:type_name -> servicemanager.v4.InstanceMonitoring
	38, // 68: servicemanager.v4.AverageMonitoring.node_monitoring:type_name -> servicemanager.v4.MonitoringData
	40, // 69: servicemanager.v4.AverageMonitoring.instances_monitoring:type_name -> servicemanager.v4.InstanceMonitoring
	39, // 70: servicemanager.v4.MonitoringData.partitions:type_name -> servicemanager.v4.PartitionUsage
	50, // 71: servicemanager.v4.MonitoringData.timestamp:type_name -> google.protobuf.Timestamp
	51, // 72: servicemanager.v4.InstanceMonitoring.instance:type_name -> common.v1.InstanceIdent
	38, // 73: servicemanager.v4.InstanceMonitoring.monitoring_data:type_name -> servicemanager.v4.MonitoringData
	51, // 74: servicemanager.v4.InstanceQuotaAlert.instance:type_name -> common.v1.InstanceIdent
	51, // 75: servicemanager.v4.DeviceAllocateAlert.instance:type_name -> common.v1.InstanceIdent
	52, // 76: servicemanager.v4.ResourceValidateAlert.errors:type_name -> common.v1.ErrorInfo
	51, // 77: servicemanager.v4.InstanceAlert.instance:type_name -> common.v1.InstanceIdent
	26, // 78: servicemanager.v4.SMService.RegisterSM:input_type -> servicemanager.v4.SMOutgoingMessages
	1,  // 79: servicemanager.v4.SMService.RegisterSM:output_type -> servicemanager.v4.SMIncomingMessages
	79, // [79:80] is the sub-list for method output_type
	78, // [78:79] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_servicemanager_v4_servicemanager_proto_init() }
func file_servicemanager_v4_servicemanager_proto_init() {
	if File_servicemanager_v4_servicemanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_servicemanager_v4_servicemanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMIncomingMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunInstances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideEnvVars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideInstanceEnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceCrashLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAverageMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageContentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMOutgoingMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunInstancesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstancesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideEnvVarStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVarInstanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVarStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstantMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AverageMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemQuotaAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceQuotaAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAllocateAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceValidateAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v4_servicemanager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_servicemanager_v4_servicemanager_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SMIncomingMessages_GetNodeConfigStatus)(nil),
		(*SMIncomingMessages_CheckNodeConfig)(nil),
		(*SMIncomingMessages_SetNodeConfig)(nil),
		(*SMIncomingMessages_RunInstances)(nil),
		(*SMIncomingMessages_OverrideEnvVars)(nil),
		(*SMIncomingMessages_SystemLogRequest)(nil),
		(*SMIncomingMessages_InstanceLogRequest)(nil),
		(*SMIncomingMessages_InstanceCrashLogRequest)(nil),
		(*SMIncomingMessages_GetAverageMonitoring)(nil),
		(*SMIncomingMessages_ConnectionStatus)(nil),
		(*SMIncomingMessages_ImageContentInfo)(nil),
		(*SMIncomingMessages_ImageContent)(nil),
		(*SMIncomingMessages_UpdateNetworks)(nil),
		(*SMIncomingMessages_ClockSync)(nil),
	}
	file_servicemanager_v4_servicemanager_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Alert_SystemQuotaAlert)(nil),
		(*Alert_InstanceQuotaAlert)(nil),
		(*Alert_ResourceValidateAlert)(nil),
		(*Alert_DeviceAllocateAlert)(nil),
		(*Alert_SystemAlert)(nil),
		(*Alert_CoreAlert)(nil),
		(*Alert_InstanceAlert)(nil),
	}
	file_servicemanager_v4_servicemanager_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*SMOutgoingMessages_NodeConfigStatus)(nil),
		(*SMOutgoingMessages_RunInstancesStatus)(nil),
		(*SMOutgoingMessages_UpdateInstancesStatus)(nil),
		(*SMOutgoingMessages_OverrideEnvVarStatus)(nil),
		(*SMOutgoingMessages_Log)(nil),
		(*SMOutgoingMessages_InstantMonitoring)(nil),
		(*SMOutgoingMessages_AverageMonitoring)(nil),
		(*SMOutgoingMessages_Alert)(nil),
		(*SMOutgoingMessages_ImageContentRequest)(nil),
		(*SMOutgoingMessages_ClockSyncRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_servicemanager_v4_servicemanager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_servicemanager_v4_servicemanager_proto_goTypes,
		DependencyIndexes: file_servicemanager_v4_servicemanager_proto_depIdxs,
		EnumInfos:         file_servicemanager_v4_servicemanager_proto_enumTypes,
		MessageInfos:      file_servicemanager_v4_servicemanager_proto_msgTypes,
	}.Build()
	File_servicemanager_v4_servicemanager_proto = out.File
	file_servicemanager_v4_servicemanager_proto_rawDesc = nil
	file_servicemanager_v4_servicemanager_proto_goTypes = nil
	file_servicemanager_v4_servicemanager_proto_depIdxs = nil
}
